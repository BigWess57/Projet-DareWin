{
  "stats": {
    "suites": 15,
    "tests": 57,
    "passes": 57,
    "pending": 0,
    "failures": 0,
    "start": "2025-07-20T22:01:17.317Z",
    "end": "2025-07-20T22:01:18.203Z",
    "duration": 886,
    "testsRegistered": 57,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "50dfc8b8-5717-4a5c-b19a-5b070abc6189",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "185f2ef4-60b9-4fad-863a-1bf8078df20c",
          "title": "tests Challenge contract",
          "fullFile": "/home/ibuntu/BlockchainDev/Alyra/MyTests/PROJET_FINAL/backend/test/Challenge.test.js",
          "file": "/test/Challenge.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "95feb40d-f694-4c2d-9ad4-1c02b7c7c090",
              "title": "deployment",
              "fullFile": "/home/ibuntu/BlockchainDev/Alyra/MyTests/PROJET_FINAL/backend/test/Challenge.test.js",
              "file": "/test/Challenge.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"deployment\"",
                  "fullTitle": "tests Challenge contract deployment \"before each\" hook in \"deployment\"",
                  "timedOut": false,
                  "duration": 11,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "signers = await ethers.getSigners();\n//Token deployment\nconst DareWinToken = await ethers.getContractFactory('DareWin');\ntoken = await DareWinToken.deploy(signers[0].address);\nbid = ethers.parseUnits(\"1000\", await token.decimals());",
                  "err": {},
                  "uuid": "64ca1216-d595-4684-a80d-90cd34ff3fba",
                  "parentUUID": "95feb40d-f694-4c2d-9ad4-1c02b7c7c090",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should juste deploy the contract",
                  "fullTitle": "tests Challenge contract deployment should juste deploy the contract",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//Challenge Deployment\nconst Challenge = await ethers.getContractFactory('Challenge'); \nawait expect(\n    Challenge.deploy(signers[0].address, token.target, duration, maxPlayers, bid, description, signers[0].address, false, [])\n).to.not.be.reverted",
                  "err": {},
                  "uuid": "84f8e3ca-52db-4391-93cc-c93f7a8166b6",
                  "parentUUID": "95feb40d-f694-4c2d-9ad4-1c02b7c7c090",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not be possible to deploy with a feeReceiver address to 0",
                  "fullTitle": "tests Challenge contract deployment should not be possible to deploy with a feeReceiver address to 0",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//Challenge Deployment\nconst Challenge = await ethers.getContractFactory('Challenge'); \nawait expect(\n    Challenge.deploy(signers[0].address, token.target, duration, maxPlayers, bid, description, \"0x0000000000000000000000000000000000000000\", false, [])\n).to.be.revertedWith(\"the feeReceiver cannot be address 0!\")",
                  "err": {},
                  "uuid": "2f26c85f-18ff-481e-b898-10043dfeb2f5",
                  "parentUUID": "95feb40d-f694-4c2d-9ad4-1c02b7c7c090",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "GROUP MODE : should not be possible to deploy if one player in the array is address 0",
                  "fullTitle": "tests Challenge contract deployment GROUP MODE : should not be possible to deploy if one player in the array is address 0",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//Challenge Deployment\nconst Challenge = await ethers.getContractFactory('Challenge'); \nconst playersArray = [signers[0].address, signers[1].address, \"0x0000000000000000000000000000000000000000\"]\nawait expect(\n    Challenge.deploy(signers[0].address, token.target, duration, maxPlayers, bid, description, signers[0].address, true, playersArray)\n).to.be.revertedWith(\"address 0 cannot be a player!\")",
                  "err": {},
                  "uuid": "aa11c9ff-31cf-4892-90f4-e1f11b62e7d6",
                  "parentUUID": "95feb40d-f694-4c2d-9ad4-1c02b7c7c090",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "84f8e3ca-52db-4391-93cc-c93f7a8166b6",
                "2f26c85f-18ff-481e-b898-10043dfeb2f5",
                "aa11c9ff-31cf-4892-90f4-e1f11b62e7d6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 32,
              "root": false,
              "rootEmpty": false,
              "_timeout": 40000
            },
            {
              "uuid": "6e7865a2-b18d-49b8-b9bb-94630f7ea337",
              "title": "gathering players state",
              "fullFile": "/home/ibuntu/BlockchainDev/Alyra/MyTests/PROJET_FINAL/backend/test/Challenge.test.js",
              "file": "/test/Challenge.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"gathering players state\"",
                  "fullTitle": "tests Challenge contract gathering players state \"before each\" hook in \"gathering players state\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "({challenge, signers, bid, token} = await loadFixture(deployedChallengeFixtureBase));",
                  "err": {},
                  "uuid": "d1359cb5-d401-40be-a259-2a90b17929bb",
                  "parentUUID": "6e7865a2-b18d-49b8-b9bb-94630f7ea337",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should store a player in the players array (sending enough money)",
                  "fullTitle": "tests Challenge contract gathering players state should store a player in the players array (sending enough money)",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await expect(challenge.joinChallenge())\n           .to.not.be.reverted;\n           await expect(challenge.connect(signers[1]).joinChallenge())\n           .to.not.be.reverted;\n           const player1 = await challenge.players(0);\n           expect(player1[0]).to.equal(signers[0].address);\n           const player2 = await challenge.players(1);\n           expect(player2[0]).to.equal(signers[1].address);",
                  "err": {},
                  "uuid": "943e8aba-c960-4987-9e26-978522756698",
                  "parentUUID": "6e7865a2-b18d-49b8-b9bb-94630f7ea337",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "FOR LINK MODE : should not allow any more participants to join if the max is already reached",
                  "fullTitle": "tests Challenge contract gathering players state FOR LINK MODE : should not allow any more participants to join if the max is already reached",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await challenge.joinChallenge();\nawait challenge.connect(signers[1]).joinChallenge();\nawait challenge.connect(signers[2]).joinChallenge();\nawait challenge.connect(signers[3]).joinChallenge();\nawait challenge.connect(signers[4]).joinChallenge();\nconst player1 = await challenge.players(0);\nexpect(player1[0]).to.equal(signers[0].address);\nconst player2 = await challenge.players(1);\nexpect(player2[0]).to.equal(signers[1].address);\nconst player3 = await challenge.players(2);\nexpect(player3[0]).to.equal(signers[2].address);\nconst player4 = await challenge.players(3);\nexpect(player4[0]).to.equal(signers[3].address);\nconst player5 = await challenge.players(4);\nexpect(player5[0]).to.equal(signers[4].address);\nawait expect(challenge.connect(signers[5]).joinChallenge()).to.be.revertedWith(\"This challenge is already full\");",
                  "err": {},
                  "uuid": "de593f96-80b0-44ab-8d22-2f2456c01fa5",
                  "parentUUID": "6e7865a2-b18d-49b8-b9bb-94630f7ea337",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow a participant to join twice",
                  "fullTitle": "tests Challenge contract gathering players state should not allow a participant to join twice",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await challenge.joinChallenge();\nawait expect(challenge.joinChallenge()).to.be.revertedWith(\"You already joined\");",
                  "err": {},
                  "uuid": "2b9660e1-264c-48f5-94f2-eaadccc4beb4",
                  "parentUUID": "6e7865a2-b18d-49b8-b9bb-94630f7ea337",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow a player to join if he did not approve enough tokens",
                  "fullTitle": "tests Challenge contract gathering players state should not allow a player to join if he did not approve enough tokens",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//signer 5 approves not enough tokens\nawait token.connect(signers[5]).approve(challenge.target, bid-1n);\nawait expect(\n    challenge.connect(signers[5]).joinChallenge()\n).to.be.revertedWith(\"Need prior approval for token spending\");",
                  "err": {},
                  "uuid": "0bbc0b9c-df9a-4487-a230-6070e6721636",
                  "parentUUID": "6e7865a2-b18d-49b8-b9bb-94630f7ea337",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow a player to withdraw from the challenge (before start), while letting the challenge start when required without issues",
                  "fullTitle": "tests Challenge contract gathering players state should allow a player to withdraw from the challenge (before start), while letting the challenge start when required without issues",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//5 players join\nawait challenge.joinChallenge();\nawait challenge.connect(signers[1]).joinChallenge();\nawait challenge.connect(signers[2]).joinChallenge();\nawait challenge.connect(signers[3]).joinChallenge();\nawait challenge.connect(signers[4]).joinChallenge();\n//one player withdraws from challenge\nawait challenge.connect(signers[2]).withdrawFromChallenge();\nconst player1 = await challenge.players(0);\nexpect(player1[0]).to.equal(signers[0].address);\nconst player2 = await challenge.players(1);\nexpect(player2[0]).to.equal(signers[1].address);\nconst player3 = await challenge.players(2);\nexpect(player3[0]).to.equal(signers[4].address);\nconst player4 = await challenge.players(3);\nexpect(player4[0]).to.equal(signers[3].address);\n//the 3rd player should not be in the array anymore, this should revert\nawait expect(\n    challenge.players(4)\n).to.be.reverted;\n//Admin successfully starts challenge\nawait challenge.startChallenge();\nexpect(\n   await challenge.currentStatus()\n).to.equal(ChallengeStatus.OngoingChallenge);",
                  "err": {},
                  "uuid": "89bbafb1-0057-47b8-a006-2506e9762244",
                  "parentUUID": "6e7865a2-b18d-49b8-b9bb-94630f7ea337",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow a player to withdraw from the challenge if he hasnt joined",
                  "fullTitle": "tests Challenge contract gathering players state should not allow a player to withdraw from the challenge if he hasnt joined",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//try to withdraw without having joined, reverts\nawait expect(\n   challenge.withdrawFromChallenge()\n).to.be.revertedWith(\"You are not in players list\");",
                  "err": {},
                  "uuid": "cd05ee08-2710-4a55-9aa5-54d6f946a4e4",
                  "parentUUID": "6e7865a2-b18d-49b8-b9bb-94630f7ea337",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow a player to join, withdraw and then join again the challenge",
                  "fullTitle": "tests Challenge contract gathering players state should allow a player to join, withdraw and then join again the challenge",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await challenge.joinChallenge();\nawait challenge.withdrawFromChallenge();\nawait expect(\n   challenge.joinChallenge()\n).to.not.be.reverted",
                  "err": {},
                  "uuid": "c0d69244-7b51-4857-a6c2-2b937caa27e3",
                  "parentUUID": "6e7865a2-b18d-49b8-b9bb-94630f7ea337",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow to start the challenge if there is less than 2 players",
                  "fullTitle": "tests Challenge contract gathering players state should not allow to start the challenge if there is less than 2 players",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "challenge.joinChallenge();\nawait expect(\n    challenge.startChallenge()\n).to.be.revertedWith(\"Not enough players to start the challenge\")",
                  "err": {},
                  "uuid": "489244b6-ea12-4f8f-b6bb-85c91fa72820",
                  "parentUUID": "6e7865a2-b18d-49b8-b9bb-94630f7ea337",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert startChallenge() if a participant doesnt have enough tokens",
                  "fullTitle": "tests Challenge contract gathering players state should revert startChallenge() if a participant doesnt have enough tokens",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await challenge.joinChallenge()\n//signer 0 sends tokens to signer 6, but not enough\nawait token.transfer(signers[6], bid-1n);\nawait token.connect(signers[6]).approve(challenge.target, bid);\nawait challenge.connect(signers[6]).joinChallenge()\nawait expect(\n    challenge.startChallenge()\n).to.be.revertedWithCustomError(token, \"ERC20InsufficientBalance\");",
                  "err": {},
                  "uuid": "11e77f91-cabe-4d59-992e-9b0ed65ed1a1",
                  "parentUUID": "6e7865a2-b18d-49b8-b9bb-94630f7ea337",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should revert startChallenge() if a participant did not approve enough tokens",
                  "fullTitle": "tests Challenge contract gathering players state should revert startChallenge() if a participant did not approve enough tokens",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await challenge.joinChallenge()\n//signer 0 sends tokens to signer 6, but not enough\nawait token.transfer(signers[6], bid);\nawait token.connect(signers[6]).approve(challenge.target, bid);\nawait challenge.connect(signers[6]).joinChallenge()\n//lowers approval amount\nawait token.connect(signers[6]).approve(challenge.target, bid-1n);\nawait expect(\n    challenge.startChallenge()\n).to.be.revertedWithCustomError(token, \"ERC20InsufficientAllowance\");",
                  "err": {},
                  "uuid": "c3f31ade-0c89-481c-9c92-9ba0a4f8aa5b",
                  "parentUUID": "6e7865a2-b18d-49b8-b9bb-94630f7ea337",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow the admin to go to the next state",
                  "fullTitle": "tests Challenge contract gathering players state should allow the admin to go to the next state",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await challenge.joinChallenge();\nawait challenge.connect(signers[1]).joinChallenge();\nawait challenge.startChallenge();\nexpect(\n   await challenge.currentStatus()\n).to.equal(ChallengeStatus.OngoingChallenge);",
                  "err": {},
                  "uuid": "20106b02-934b-4449-9a88-b5b495164515",
                  "parentUUID": "6e7865a2-b18d-49b8-b9bb-94630f7ea337",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "943e8aba-c960-4987-9e26-978522756698",
                "de593f96-80b0-44ab-8d22-2f2456c01fa5",
                "2b9660e1-264c-48f5-94f2-eaadccc4beb4",
                "0bbc0b9c-df9a-4487-a230-6070e6721636",
                "89bbafb1-0057-47b8-a006-2506e9762244",
                "cd05ee08-2710-4a55-9aa5-54d6f946a4e4",
                "c0d69244-7b51-4857-a6c2-2b937caa27e3",
                "489244b6-ea12-4f8f-b6bb-85c91fa72820",
                "11e77f91-cabe-4d59-992e-9b0ed65ed1a1",
                "c3f31ade-0c89-481c-9c92-9ba0a4f8aa5b",
                "20106b02-934b-4449-9a88-b5b495164515"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 86,
              "root": false,
              "rootEmpty": false,
              "_timeout": 40000
            },
            {
              "uuid": "fe6fd590-1317-4e0f-9063-74d4445962c5",
              "title": "gathering players state (FOR GROUP MODE SPECIFIC TESTS)",
              "fullFile": "/home/ibuntu/BlockchainDev/Alyra/MyTests/PROJET_FINAL/backend/test/Challenge.test.js",
              "file": "/test/Challenge.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"gathering players state (FOR GROUP MODE SPECIFIC TESTS)\"",
                  "fullTitle": "tests Challenge contract gathering players state (FOR GROUP MODE SPECIFIC TESTS) \"before each\" hook in \"gathering players state (FOR GROUP MODE SPECIFIC TESTS)\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//Deploying in group mode\n({challenge, signers, bid, token} = await loadFixture(groupModeFixture));",
                  "err": {},
                  "uuid": "8cb85ad4-a3fa-483e-9c92-e85047d88ada",
                  "parentUUID": "fe6fd590-1317-4e0f-9063-74d4445962c5",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "FOR GROUP MODE : the stored array of players should be correct",
                  "fullTitle": "tests Challenge contract gathering players state (FOR GROUP MODE SPECIFIC TESTS) FOR GROUP MODE : the stored array of players should be correct",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await challenge.connect(signers[0]).joinChallenge()\nawait challenge.connect(signers[1]).joinChallenge()\nawait challenge.connect(signers[2]).joinChallenge()\nawait challenge.connect(signers[3]).joinChallenge()\n\nconst player1 = await challenge.players(0);\nexpect(player1[0]).to.equal(signers[0].address);\nconst player2 = await challenge.players(1);\nexpect(player2[0]).to.equal(signers[1].address);\nconst player3 = await challenge.players(2);\nexpect(player3[0]).to.equal(signers[2].address);\nconst player4 = await challenge.players(3);\nexpect(player4[0]).to.equal(signers[3].address);",
                  "err": {},
                  "uuid": "44b0d797-a7cb-465c-8bea-e5e3a75b33b5",
                  "parentUUID": "fe6fd590-1317-4e0f-9063-74d4445962c5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "FOR GROUP MODE : should not allow a player to join if he is not among those chosen by the admin at creation",
                  "fullTitle": "tests Challenge contract gathering players state (FOR GROUP MODE SPECIFIC TESTS) FOR GROUP MODE : should not allow a player to join if he is not among those chosen by the admin at creation",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await expect(\n    challenge.connect(signers[5]).joinChallenge()\n).to.be.revertedWith(\"You are not allowed to join this challenge.\")",
                  "err": {},
                  "uuid": "110fbde6-8d01-4e0c-8682-fd678c7a3b10",
                  "parentUUID": "fe6fd590-1317-4e0f-9063-74d4445962c5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "44b0d797-a7cb-465c-8bea-e5e3a75b33b5",
                "110fbde6-8d01-4e0c-8682-fd678c7a3b10"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 11,
              "root": false,
              "rootEmpty": false,
              "_timeout": 40000
            },
            {
              "uuid": "e135fa8b-592e-430b-b263-8ea9c3f9e4dd",
              "title": "ongoing challenge state",
              "fullFile": "/home/ibuntu/BlockchainDev/Alyra/MyTests/PROJET_FINAL/backend/test/Challenge.test.js",
              "file": "/test/Challenge.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"ongoing challenge state\"",
                  "fullTitle": "tests Challenge contract ongoing challenge state \"before each\" hook in \"ongoing challenge state\"",
                  "timedOut": false,
                  "duration": 43,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "({challenge, signers} = await loadFixture(OngoingChallengeFixture));",
                  "err": {},
                  "uuid": "5b431e42-cc13-4d98-84c1-ce70f3fbc531",
                  "parentUUID": "e135fa8b-592e-430b-b263-8ea9c3f9e4dd",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "state should be \"OngoingChallenge\" during the challenge. ",
                  "fullTitle": "tests Challenge contract ongoing challenge state state should be \"OngoingChallenge\" during the challenge. ",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(await challenge.currentStatus()).to.equal(ChallengeStatus.OngoingChallenge);",
                  "err": {},
                  "uuid": "4bf96f56-a4c1-4ed9-8be3-12c70b5c6058",
                  "parentUUID": "e135fa8b-592e-430b-b263-8ea9c3f9e4dd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4bf96f56-a4c1-4ed9-8be3-12c70b5c6058"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 40000
            },
            {
              "uuid": "bd0d913e-7101-4eb5-a37c-82b832f3922a",
              "title": "voting for winner state",
              "fullFile": "/home/ibuntu/BlockchainDev/Alyra/MyTests/PROJET_FINAL/backend/test/Challenge.test.js",
              "file": "/test/Challenge.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"voting for winner state\"",
                  "fullTitle": "tests Challenge contract voting for winner state \"before each\" hook in \"voting for winner state\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "({challenge, signers} = await loadFixture(VotingForWinnerFixture));",
                  "err": {},
                  "uuid": "6eb6befb-4a50-457e-9af3-0b0a8b5a725c",
                  "parentUUID": "bd0d913e-7101-4eb5-a37c-82b832f3922a",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should allow a player to vote (for another player). check that the vote is registered",
                  "fullTitle": "tests Challenge contract voting for winner state should allow a player to vote (for another player). check that the vote is registered",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await challenge.voteForWinner(signers[1].address);\nconst player2 = await challenge.players(1);\nexpect(player2[1]).to.equal(1);",
                  "err": {},
                  "uuid": "b30495b6-d393-4d77-82e2-e8d98d113a8a",
                  "parentUUID": "bd0d913e-7101-4eb5-a37c-82b832f3922a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow a non player to vote",
                  "fullTitle": "tests Challenge contract voting for winner state should not allow a non player to vote",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await expect(\n   challenge.connect(signers[5]).voteForWinner(signers[1].address)\n).to.be.revertedWith(\"You are not a player. You cannot vote for winner.\");",
                  "err": {},
                  "uuid": "9854ecf6-e6a3-4e3a-94ba-84821b28cd9b",
                  "parentUUID": "bd0d913e-7101-4eb5-a37c-82b832f3922a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow a player to vote twice",
                  "fullTitle": "tests Challenge contract voting for winner state should not allow a player to vote twice",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await challenge.voteForWinner(signers[1].address);\nawait expect(\n   challenge.voteForWinner(signers[1].address)\n).to.be.revertedWith(\"You have already voted.\");",
                  "err": {},
                  "uuid": "a67e9857-3f5b-4f73-882e-fdd9e82ca7d1",
                  "parentUUID": "bd0d913e-7101-4eb5-a37c-82b832f3922a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow to go to next state (ChallengeWon) if everyone has not voted (and minimum delay hasn't passed)",
                  "fullTitle": "tests Challenge contract voting for winner state should not allow to go to next state (ChallengeWon) if everyone has not voted (and minimum delay hasn't passed)",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await challenge.voteForWinner(signers[1].address)\nawait challenge.connect(signers[1]).voteForWinner(signers[1].address)\nawait expect(\n   challenge.endWinnerVote()\n).to.be.revertedWith(\"Not all player have voted for a winner yet (and minimum delay has not passed)\");",
                  "err": {},
                  "uuid": "24ae67a7-3c24-4500-864f-7815607fa13b",
                  "parentUUID": "bd0d913e-7101-4eb5-a37c-82b832f3922a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow ANYONE to go to next state (ChallengeWon) if everyone has not voted but minimum delay has passed",
                  "fullTitle": "tests Challenge contract voting for winner state should allow ANYONE to go to next state (ChallengeWon) if everyone has not voted but minimum delay has passed",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await challenge.voteForWinner(signers[1].address)\nawait challenge.connect(signers[1]).voteForWinner(signers[1].address)\n//Pass enough time\nawait time.increase(votingDelay);\nawait expect(\n   challenge.connect(signers[2]).endWinnerVote()\n).not.to.be.reverted;",
                  "err": {},
                  "uuid": "c3485de3-897a-4fc3-b3bb-08ceb720fed4",
                  "parentUUID": "bd0d913e-7101-4eb5-a37c-82b832f3922a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow ANYONE to go to next state (ChallengeWon) when everyone voted",
                  "fullTitle": "tests Challenge contract voting for winner state should allow ANYONE to go to next state (ChallengeWon) when everyone voted",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await challenge.voteForWinner(signers[1].address)\nawait challenge.connect(signers[1]).voteForWinner(signers[1].address) \nawait challenge.connect(signers[2]).voteForWinner(signers[2].address) \nawait challenge.connect(signers[3]).voteForWinner(signers[1].address) \nawait challenge.connect(signers[4]).voteForWinner(signers[2].address) \n//Any player can end vote, because everyone has voted\nawait challenge.connect(signers[1]).endWinnerVote();\nexpect(await challenge.currentStatus()).to.equal(ChallengeStatus.ChallengeWon);",
                  "err": {},
                  "uuid": "61fe364c-d7e6-4839-bb4f-657fe53353f1",
                  "parentUUID": "bd0d913e-7101-4eb5-a37c-82b832f3922a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow ANYONE to go to next state (ChallengeWon) if no one has voted (even if time has passed)",
                  "fullTitle": "tests Challenge contract voting for winner state should not allow ANYONE to go to next state (ChallengeWon) if no one has voted (even if time has passed)",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//Pass enough time\n            await time.increase(votingDelay);\n            //Any player can end vote, because everyone has voted\n            await expect(challenge.connect(signers[1]).endWinnerVote()).to.be.revertedWith('Not allowed in this state');",
                  "err": {},
                  "uuid": "44537d57-8b0a-4010-8008-7879a9b6c451",
                  "parentUUID": "bd0d913e-7101-4eb5-a37c-82b832f3922a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b30495b6-d393-4d77-82e2-e8d98d113a8a",
                "9854ecf6-e6a3-4e3a-94ba-84821b28cd9b",
                "a67e9857-3f5b-4f73-882e-fdd9e82ca7d1",
                "24ae67a7-3c24-4500-864f-7815607fa13b",
                "c3485de3-897a-4fc3-b3bb-08ceb720fed4",
                "61fe364c-d7e6-4839-bb4f-657fe53353f1",
                "44537d57-8b0a-4010-8008-7879a9b6c451"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 35,
              "root": false,
              "rootEmpty": false,
              "_timeout": 40000
            },
            {
              "uuid": "8856ddde-bf74-48b0-8b35-e11619a6b679",
              "title": "challenge won state",
              "fullFile": "/home/ibuntu/BlockchainDev/Alyra/MyTests/PROJET_FINAL/backend/test/Challenge.test.js",
              "file": "/test/Challenge.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"challenge won state\"",
                  "fullTitle": "tests Challenge contract challenge won state \"before each\" hook in \"challenge won state\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "({challenge, signers, bid, token} = await loadFixture(VotingForWinnerFixture));",
                  "err": {},
                  "uuid": "b27b5957-e7d3-4566-938d-2e4666869721",
                  "parentUUID": "8856ddde-bf74-48b0-8b35-e11619a6b679",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "winner should receive prize when endWinnerVote() is triggered",
                  "fullTitle": "tests Challenge contract challenge won state winner should receive prize when endWinnerVote() is triggered",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//Players voting\nawait challenge.voteForWinner(signers[1].address)\nawait challenge.connect(signers[1]).voteForWinner(signers[1].address) \nawait challenge.connect(signers[2]).voteForWinner(signers[2].address) \nawait challenge.connect(signers[3]).voteForWinner(signers[1].address) \nawait challenge.connect(signers[4]).voteForWinner(signers[2].address) \n//Check balance before\nconst balanceBefore = await token.balanceOf(signers[1].address);\n//End vote\nawait challenge.endWinnerVote();\n//Check balance after\nconst balanceAfter = await token.balanceOf(signers[1].address);\nconst diff = Number(balanceAfter - balanceBefore);\nconst numberBid = Number(bid);\nconst expectedDiff = numberBid*5 - 5*numberBid*totalFee;\n//Difference should be equal to cash prize won\nexpect(diff).to.equal(expectedDiff); // substract fees too",
                  "err": {},
                  "uuid": "bb0e76f0-cdf7-4fd9-98cb-bf734f33b6ba",
                  "parentUUID": "8856ddde-bf74-48b0-8b35-e11619a6b679",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "fee receiver should receive half of the fees (the rest is burnt)",
                  "fullTitle": "tests Challenge contract challenge won state fee receiver should receive half of the fees (the rest is burnt)",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//Players voting\nawait challenge.voteForWinner(signers[2].address)\nawait challenge.connect(signers[1]).voteForWinner(signers[1].address)\nawait challenge.connect(signers[2]).voteForWinner(signers[2].address)\nawait challenge.connect(signers[3]).voteForWinner(signers[1].address)\nawait challenge.connect(signers[4]).voteForWinner(signers[4].address)\nconst balanceBefore = await token.balanceOf(signers[0].address);\n//End vote\nawait challenge.endWinnerVote();\nconst balanceAfter = await token.balanceOf(signers[0].address);\nconst diff = Number(balanceAfter - balanceBefore);\nconst numberBid = Number(bid);\nconst expectedFeesReceived = numberBid*5*totalFee/2;\n\nexpect(\n    diff\n).to.equal(expectedFeesReceived);",
                  "err": {},
                  "uuid": "e195e23a-8ca1-4684-8c68-6e955be00bff",
                  "parentUUID": "8856ddde-bf74-48b0-8b35-e11619a6b679",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "half of the fees should have been burnt",
                  "fullTitle": "tests Challenge contract challenge won state half of the fees should have been burnt",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//Players voting\nawait challenge.voteForWinner(signers[2].address)\nawait challenge.connect(signers[1]).voteForWinner(signers[1].address)\nawait challenge.connect(signers[2]).voteForWinner(signers[2].address)\nawait challenge.connect(signers[3]).voteForWinner(signers[1].address)\nawait challenge.connect(signers[4]).voteForWinner(signers[4].address)\nconst initialTotalSupply = await token.totalSupply();\n//End vote\nawait challenge.endWinnerVote();\nconst finalTotalSupply = await token.totalSupply();\nconst diff = Number(initialTotalSupply - finalTotalSupply);\nconst numberBid = Number(bid);\nconst expectedBurntAmount = numberBid*5*totalFee/2;\n\nexpect(\n    diff\n).to.equal(expectedBurntAmount);",
                  "err": {},
                  "uuid": "0111de52-53a5-47b5-b6ec-213e667d4b1b",
                  "parentUUID": "8856ddde-bf74-48b0-8b35-e11619a6b679",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "When there is a tie, should allow both winners to receive prize",
                  "fullTitle": "tests Challenge contract challenge won state When there is a tie, should allow both winners to receive prize",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//Players voting\nawait challenge.voteForWinner(signers[2].address)\nawait challenge.connect(signers[1]).voteForWinner(signers[1].address)\nawait challenge.connect(signers[2]).voteForWinner(signers[2].address)\nawait challenge.connect(signers[3]).voteForWinner(signers[1].address)\nawait challenge.connect(signers[4]).voteForWinner(signers[4].address)\n//Check balance before for both winners\nconst balanceBefore1 = await token.balanceOf(signers[1].address);\nconst balanceBefore2 = await token.balanceOf(signers[2].address);\n//End vote\nawait challenge.endWinnerVote();\nconst winner1 = await challenge.challengeWinners(0)\nconst winner2 = await challenge.challengeWinners(1)\nexpect(winner1).to.equal(signers[2].address);\nexpect(winner2).to.equal(signers[1].address);\n//Check balance after (winner1)\nconst balanceAfter1 = await token.balanceOf(signers[1].address);\nconst diff1 = Number(balanceAfter1 - balanceBefore1);\nconst numberBid = Number(bid);\nconst expectedDiff = numberBid*5/2 - 5*numberBid*totalFee/2;\nexpect(\n    diff1\n).to.equal(expectedDiff);\n//Check balance after (winner2)\nconst balanceAfter2 = await token.balanceOf(signers[2].address);\nconst diff2 = Number(balanceAfter2 - balanceBefore2);\nexpect(\n    diff2\n).to.equal(expectedDiff); //substract fees too",
                  "err": {},
                  "uuid": "79fc1944-c9cb-409e-85d2-8409f49ff910",
                  "parentUUID": "8856ddde-bf74-48b0-8b35-e11619a6b679",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bb0e76f0-cdf7-4fd9-98cb-bf734f33b6ba",
                "e195e23a-8ca1-4684-8c68-6e955be00bff",
                "0111de52-53a5-47b5-b6ec-213e667d4b1b",
                "79fc1944-c9cb-409e-85d2-8409f49ff910"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 45,
              "root": false,
              "rootEmpty": false,
              "_timeout": 40000
            },
            {
              "uuid": "8159c2ce-d8fe-497e-a54a-4c09e1a98fc7",
              "title": "Owner functions",
              "fullFile": "/home/ibuntu/BlockchainDev/Alyra/MyTests/PROJET_FINAL/backend/test/Challenge.test.js",
              "file": "/test/Challenge.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should not allow not admin player to go to OngoingChallenge state",
                  "fullTitle": "tests Challenge contract Owner functions should not allow not admin player to go to OngoingChallenge state",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const {challenge, signers} = await loadFixture(deployedChallengeFixtureBase);\nawait expect(\n   challenge.connect(signers[1]).startChallenge()\n).to.be.revertedWithCustomError(challenge, \"OwnableUnauthorizedAccount\").withArgs(signers[1].address);",
                  "err": {},
                  "uuid": "1f5cfd2f-b652-45b1-a89c-25201d29fc5d",
                  "parentUUID": "8159c2ce-d8fe-497e-a54a-4c09e1a98fc7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1f5cfd2f-b652-45b1-a89c-25201d29fc5d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 40000
            },
            {
              "uuid": "cac735f4-7716-4b4b-a1c2-b89f15ae151b",
              "title": "State functions availability",
              "fullFile": "/home/ibuntu/BlockchainDev/Alyra/MyTests/PROJET_FINAL/backend/test/Challenge.test.js",
              "file": "/test/Challenge.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "a0861444-c7df-476e-b027-a225477b65ac",
                  "title": "state GatheringPlayers",
                  "fullFile": "/home/ibuntu/BlockchainDev/Alyra/MyTests/PROJET_FINAL/backend/test/Challenge.test.js",
                  "file": "/test/Challenge.test.js",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"state GatheringPlayers\"",
                      "fullTitle": "tests Challenge contract State functions availability state GatheringPlayers \"before each\" hook in \"state GatheringPlayers\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "({challenge, signers} = await loadFixture(deployedChallengeFixtureBase));",
                      "err": {},
                      "uuid": "9d0c37c1-dcf8-49c2-bfad-95e1bd6e146e",
                      "parentUUID": "a0861444-c7df-476e-b027-a225477b65ac",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should not allow voteForWinner() in GatheringPlayers state",
                      "fullTitle": "tests Challenge contract State functions availability state GatheringPlayers should not allow voteForWinner() in GatheringPlayers state",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await expect(\n    challenge.voteForWinner(signers[1].address)\n).to.be.revertedWith(\"Not allowed in this state\");",
                      "err": {},
                      "uuid": "8bb16e47-d686-4ef7-9ea3-6ede13becb9f",
                      "parentUUID": "a0861444-c7df-476e-b027-a225477b65ac",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow endWinnerVote() in GatheringPlayers state",
                      "fullTitle": "tests Challenge contract State functions availability state GatheringPlayers should not allow endWinnerVote() in GatheringPlayers state",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await expect(\n    challenge.endWinnerVote()\n).to.be.revertedWith(\"Not allowed in this state\");",
                      "err": {},
                      "uuid": "07614805-5ad4-4392-a746-664a1b715c1f",
                      "parentUUID": "a0861444-c7df-476e-b027-a225477b65ac",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "8bb16e47-d686-4ef7-9ea3-6ede13becb9f",
                    "07614805-5ad4-4392-a746-664a1b715c1f"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 3,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 40000
                },
                {
                  "uuid": "205e321a-0c2c-4e85-b3b7-0f1ff9f7cfb8",
                  "title": "state OngoingChallenge",
                  "fullFile": "/home/ibuntu/BlockchainDev/Alyra/MyTests/PROJET_FINAL/backend/test/Challenge.test.js",
                  "file": "/test/Challenge.test.js",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"state OngoingChallenge\"",
                      "fullTitle": "tests Challenge contract State functions availability state OngoingChallenge \"before each\" hook in \"state OngoingChallenge\"",
                      "timedOut": false,
                      "duration": 1,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "({challenge, signers} = await loadFixture(OngoingChallengeFixture));",
                      "err": {},
                      "uuid": "ca0e73e7-fe81-4035-b5de-3242056d49fa",
                      "parentUUID": "205e321a-0c2c-4e85-b3b7-0f1ff9f7cfb8",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should not allow joinChallenge() in OngoingChallenge state",
                      "fullTitle": "tests Challenge contract State functions availability state OngoingChallenge should not allow joinChallenge() in OngoingChallenge state",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await expect(\n    challenge.joinChallenge()\n).to.be.revertedWith(\"Not allowed in this state\");",
                      "err": {},
                      "uuid": "6e1aa5fa-b427-40cf-8fd4-d70111384d6e",
                      "parentUUID": "205e321a-0c2c-4e85-b3b7-0f1ff9f7cfb8",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow withdrawFromChallenge() in OngoingChallenge state",
                      "fullTitle": "tests Challenge contract State functions availability state OngoingChallenge should not allow withdrawFromChallenge() in OngoingChallenge state",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await expect(\n    challenge.withdrawFromChallenge()\n).to.be.revertedWith(\"Not allowed in this state\");",
                      "err": {},
                      "uuid": "8f522611-dcb3-4593-9e53-ba934b006adb",
                      "parentUUID": "205e321a-0c2c-4e85-b3b7-0f1ff9f7cfb8",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow startChallenge() in OngoingChallenge state",
                      "fullTitle": "tests Challenge contract State functions availability state OngoingChallenge should not allow startChallenge() in OngoingChallenge state",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await expect(\n    challenge.startChallenge()\n).to.be.revertedWith(\"Not allowed in this state\");",
                      "err": {},
                      "uuid": "5eb4b4fb-2311-427e-8358-c47b387974a2",
                      "parentUUID": "205e321a-0c2c-4e85-b3b7-0f1ff9f7cfb8",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow voteForWinner() in OngoingChallenge state (if the challenge is not over)",
                      "fullTitle": "tests Challenge contract State functions availability state OngoingChallenge should not allow voteForWinner() in OngoingChallenge state (if the challenge is not over)",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await expect(\n    challenge.voteForWinner(signers[1].address)\n).to.be.revertedWith(\"You are not allowed to vote now\");",
                      "err": {},
                      "uuid": "fe6db870-5428-4b3b-a368-0cf85534b2ad",
                      "parentUUID": "205e321a-0c2c-4e85-b3b7-0f1ff9f7cfb8",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow voteForWinner() in OngoingChallenge state (if the challenge is over). state should become \"VotingForWinner\" after first player votes at the end of the challenge. ",
                      "fullTitle": "tests Challenge contract State functions availability state OngoingChallenge should allow voteForWinner() in OngoingChallenge state (if the challenge is over). state should become \"VotingForWinner\" after first player votes at the end of the challenge. ",
                      "timedOut": false,
                      "duration": 5,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "expect(await challenge.currentStatus()).to.equal(ChallengeStatus.OngoingChallenge);\n//wait for challenge to end\nawait time.increase(duration);\n\n//should be allowed\nawait expect(\n    challenge.voteForWinner(signers[1].address)\n).to.not.be.reverted;\n//State should have changed\nexpect(await challenge.currentStatus()).to.equal(ChallengeStatus.VotingForWinner);",
                      "err": {},
                      "uuid": "835dd37e-3461-4e37-9bcf-dc8078055d9a",
                      "parentUUID": "205e321a-0c2c-4e85-b3b7-0f1ff9f7cfb8",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow endWinnerVote() in OngoingChallenge state",
                      "fullTitle": "tests Challenge contract State functions availability state OngoingChallenge should not allow endWinnerVote() in OngoingChallenge state",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await expect(\n    challenge.endWinnerVote()\n).to.be.revertedWith(\"Not allowed in this state\");",
                      "err": {},
                      "uuid": "994a8e7e-50c9-4f0a-992a-1f5d933d42a1",
                      "parentUUID": "205e321a-0c2c-4e85-b3b7-0f1ff9f7cfb8",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "6e1aa5fa-b427-40cf-8fd4-d70111384d6e",
                    "8f522611-dcb3-4593-9e53-ba934b006adb",
                    "5eb4b4fb-2311-427e-8358-c47b387974a2",
                    "fe6db870-5428-4b3b-a368-0cf85534b2ad",
                    "835dd37e-3461-4e37-9bcf-dc8078055d9a",
                    "994a8e7e-50c9-4f0a-992a-1f5d933d42a1"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 14,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 40000
                },
                {
                  "uuid": "bc643b44-3c49-47cd-934c-0a4bdfa13726",
                  "title": "state VotingForWinner",
                  "fullFile": "/home/ibuntu/BlockchainDev/Alyra/MyTests/PROJET_FINAL/backend/test/Challenge.test.js",
                  "file": "/test/Challenge.test.js",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"state VotingForWinner\"",
                      "fullTitle": "tests Challenge contract State functions availability state VotingForWinner \"before each\" hook in \"state VotingForWinner\"",
                      "timedOut": false,
                      "duration": 1,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "({challenge, signers, bid} = await loadFixture(VotingForWinnerFixture));",
                      "err": {},
                      "uuid": "3e5822ef-19b5-4773-a92b-1c000e2d3177",
                      "parentUUID": "bc643b44-3c49-47cd-934c-0a4bdfa13726",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should not allow joinChallenge() in VotingForWinner state",
                      "fullTitle": "tests Challenge contract State functions availability state VotingForWinner should not allow joinChallenge() in VotingForWinner state",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await expect(\n    challenge.joinChallenge()\n).to.be.revertedWith(\"Not allowed in this state\");",
                      "err": {},
                      "uuid": "ef4025e3-baeb-46c0-b20b-6f7fe362aac6",
                      "parentUUID": "bc643b44-3c49-47cd-934c-0a4bdfa13726",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow withdrawFromChallenge() in OngoingChallenge state",
                      "fullTitle": "tests Challenge contract State functions availability state VotingForWinner should not allow withdrawFromChallenge() in OngoingChallenge state",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await expect(\n    challenge.withdrawFromChallenge()\n).to.be.revertedWith(\"Not allowed in this state\");",
                      "err": {},
                      "uuid": "a75cf202-7830-421b-a92a-2e047b30cad4",
                      "parentUUID": "bc643b44-3c49-47cd-934c-0a4bdfa13726",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow startChallenge() in VotingForWinner state",
                      "fullTitle": "tests Challenge contract State functions availability state VotingForWinner should not allow startChallenge() in VotingForWinner state",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await expect(\n    challenge.startChallenge()\n).to.be.revertedWith(\"Not allowed in this state\");",
                      "err": {},
                      "uuid": "9dfb7af7-75a7-43c4-ad68-bf9fa13beae1",
                      "parentUUID": "bc643b44-3c49-47cd-934c-0a4bdfa13726",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "ef4025e3-baeb-46c0-b20b-6f7fe362aac6",
                    "a75cf202-7830-421b-a92a-2e047b30cad4",
                    "9dfb7af7-75a7-43c4-ad68-bf9fa13beae1"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 4,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 40000
                },
                {
                  "uuid": "062e7b91-8c51-477f-9da3-a5d962575a85",
                  "title": "state ChallengeWon",
                  "fullFile": "/home/ibuntu/BlockchainDev/Alyra/MyTests/PROJET_FINAL/backend/test/Challenge.test.js",
                  "file": "/test/Challenge.test.js",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"state ChallengeWon\"",
                      "fullTitle": "tests Challenge contract State functions availability state ChallengeWon \"before each\" hook in \"state ChallengeWon\"",
                      "timedOut": false,
                      "duration": 2,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "({challenge, signers, bid} = await loadFixture(EndingVoteFixture));\nawait challenge.endWinnerVote();",
                      "err": {},
                      "uuid": "9faee77e-c53b-494c-a24a-9b109aa8d356",
                      "parentUUID": "062e7b91-8c51-477f-9da3-a5d962575a85",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should not allow joinChallenge() in ChallengeWon state",
                      "fullTitle": "tests Challenge contract State functions availability state ChallengeWon should not allow joinChallenge() in ChallengeWon state",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await expect(\n    challenge.joinChallenge()\n).to.be.revertedWith(\"Not allowed in this state\");",
                      "err": {},
                      "uuid": "86f7368d-189c-4f13-9b90-d31dd8eafcf9",
                      "parentUUID": "062e7b91-8c51-477f-9da3-a5d962575a85",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow withdrawFromChallenge() in OngoingChallenge state",
                      "fullTitle": "tests Challenge contract State functions availability state ChallengeWon should not allow withdrawFromChallenge() in OngoingChallenge state",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await expect(\n    challenge.withdrawFromChallenge()\n).to.be.revertedWith(\"Not allowed in this state\");",
                      "err": {},
                      "uuid": "7d3e08b7-08b7-4cd6-a245-20be56d54d62",
                      "parentUUID": "062e7b91-8c51-477f-9da3-a5d962575a85",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow startChallenge() in ChallengeWon state",
                      "fullTitle": "tests Challenge contract State functions availability state ChallengeWon should not allow startChallenge() in ChallengeWon state",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await expect(\n    challenge.startChallenge()\n).to.be.revertedWith(\"Not allowed in this state\");",
                      "err": {},
                      "uuid": "27ac0c7d-4e04-4d98-bb43-c21cd942212c",
                      "parentUUID": "062e7b91-8c51-477f-9da3-a5d962575a85",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow voteForWinner() in ChallengeWon state",
                      "fullTitle": "tests Challenge contract State functions availability state ChallengeWon should not allow voteForWinner() in ChallengeWon state",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await expect(\n    challenge.voteForWinner(signers[1].address)\n).to.be.revertedWith(\"Not allowed in this state\");",
                      "err": {},
                      "uuid": "06c5d138-73b6-4ad8-8188-e27228e5c048",
                      "parentUUID": "062e7b91-8c51-477f-9da3-a5d962575a85",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow endWinnerVote() in ChallengeWon state",
                      "fullTitle": "tests Challenge contract State functions availability state ChallengeWon should not allow endWinnerVote() in ChallengeWon state",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await expect(\n    challenge.endWinnerVote()\n).to.be.revertedWith(\"Not allowed in this state\");",
                      "err": {},
                      "uuid": "a3f2ea5d-7a24-4b20-baf8-1472925f9724",
                      "parentUUID": "062e7b91-8c51-477f-9da3-a5d962575a85",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "86f7368d-189c-4f13-9b90-d31dd8eafcf9",
                    "7d3e08b7-08b7-4cd6-a245-20be56d54d62",
                    "27ac0c7d-4e04-4d98-bb43-c21cd942212c",
                    "06c5d138-73b6-4ad8-8188-e27228e5c048",
                    "a3f2ea5d-7a24-4b20-baf8-1472925f9724"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 7,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 40000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 40000
            },
            {
              "uuid": "a301f914-112c-4669-b711-f536328de447",
              "title": "Events",
              "fullFile": "/home/ibuntu/BlockchainDev/Alyra/MyTests/PROJET_FINAL/backend/test/Challenge.test.js",
              "file": "/test/Challenge.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should emit an event when a Player Joined",
                  "fullTitle": "tests Challenge contract Events should emit an event when a Player Joined",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const {challenge, signers, bid} = await loadFixture(deployedChallengeFixtureBase)\nawait expect(challenge.joinChallenge())\n    .to.emit(challenge, \"PlayerJoined\")\n    .withArgs(signers[0].address);",
                  "err": {},
                  "uuid": "6f0f3bc5-02f7-468a-84a0-285955475bb2",
                  "parentUUID": "a301f914-112c-4669-b711-f536328de447",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit an event when a Player Withdraws from challenge",
                  "fullTitle": "tests Challenge contract Events should emit an event when a Player Withdraws from challenge",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const {challenge, signers, bid} = await loadFixture(deployedChallengeFixtureBase)\nawait challenge.joinChallenge();\nawait expect(challenge.withdrawFromChallenge())\n    .to.emit(challenge, \"PlayerWithdrawn\")\n    .withArgs(signers[0].address);",
                  "err": {},
                  "uuid": "90c0d2b1-9a42-4b98-a47f-bf83d8ecee6e",
                  "parentUUID": "a301f914-112c-4669-b711-f536328de447",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit an event when ChallengeStarted",
                  "fullTitle": "tests Challenge contract Events should emit an event when ChallengeStarted",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const {challenge, signers} = await loadFixture(deployedChallengeFixtureBase)\nawait challenge.joinChallenge();\nawait challenge.connect(signers[1]).joinChallenge();\nawait expect(challenge.startChallenge())\n    .to.emit(challenge, \"ChallengeStarted\")",
                  "err": {},
                  "uuid": "d94f6a42-641c-4c30-95fa-e47fa1764502",
                  "parentUUID": "a301f914-112c-4669-b711-f536328de447",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit an event when ChallengeEnded ",
                  "fullTitle": "tests Challenge contract Events should emit an event when ChallengeEnded ",
                  "timedOut": false,
                  "duration": 40,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const {challenge, signers} = await loadFixture(OngoingChallengeFixture)\n//Pass enough time\nawait time.increase(duration)\nawait expect(challenge.voteForWinner(signers[1].address))\n    .to.emit(challenge, \"ChallengeEnded\")",
                  "err": {},
                  "uuid": "13d5c6b9-4df2-4ec0-a636-6c1e35b13b9b",
                  "parentUUID": "a301f914-112c-4669-b711-f536328de447",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit an event when PlayerVoted",
                  "fullTitle": "tests Challenge contract Events should emit an event when PlayerVoted",
                  "timedOut": false,
                  "duration": 49,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const {challenge, signers} = await loadFixture(VotingForWinnerFixture)\nawait expect(challenge.voteForWinner(signers[1].address))\n    .to.emit(challenge, \"PlayerVoted\")\n    .withArgs(signers[0].address, signers[1].address)",
                  "err": {},
                  "uuid": "a56c5b21-83c0-4a48-8d44-fffdfc9ce028",
                  "parentUUID": "a301f914-112c-4669-b711-f536328de447",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit an event when a prize is sent",
                  "fullTitle": "tests Challenge contract Events should emit an event when a prize is sent",
                  "timedOut": false,
                  "duration": 55,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const {challenge, signers, bid} = await loadFixture(EndingVoteFixture)\n\nconst expectedPrize = bid*5n - 5n*bid*BigInt(totalFee*1000)/1000n;\nawait expect(await challenge.endWinnerVote())\n    .to.emit(challenge, \"PrizeSent\")\n    .withArgs(signers[1].address, expectedPrize)",
                  "err": {},
                  "uuid": "72667945-7f86-4fde-8a45-2e561158d048",
                  "parentUUID": "a301f914-112c-4669-b711-f536328de447",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6f0f3bc5-02f7-468a-84a0-285955475bb2",
                "90c0d2b1-9a42-4b98-a47f-bf83d8ecee6e",
                "d94f6a42-641c-4c30-95fa-e47fa1764502",
                "13d5c6b9-4df2-4ec0-a636-6c1e35b13b9b",
                "a56c5b21-83c0-4a48-8d44-fffdfc9ce028",
                "72667945-7f86-4fde-8a45-2e561158d048"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 156,
              "root": false,
              "rootEmpty": false,
              "_timeout": 40000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 40000
        },
        {
          "uuid": "814bd806-f8d4-448b-a784-045b940ad7ae",
          "title": "tests ChallengeFactory contract",
          "fullFile": "/home/ibuntu/BlockchainDev/Alyra/MyTests/PROJET_FINAL/backend/test/ChallengeFactory.test.js",
          "file": "/test/ChallengeFactory.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"tests ChallengeFactory contract\"",
              "fullTitle": "tests ChallengeFactory contract \"before each\" hook in \"tests ChallengeFactory contract\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "({challengeFactory, signers, token } = await loadFixture(deployedChallengeFactoryFixtureBase));",
              "err": {},
              "uuid": "9cbbc52d-e6f4-4639-942b-2c83092fe6fe",
              "parentUUID": "814bd806-f8d4-448b-a784-045b940ad7ae",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should just deploy the challenge factory, and create a challenge",
              "fullTitle": "tests ChallengeFactory contract should just deploy the challenge factory, and create a challenge",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "43b0f787-e8e0-4fc3-852f-cb5093423f5a",
              "parentUUID": "814bd806-f8d4-448b-a784-045b940ad7ae",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should should not be possible to deploy with a feeReceiver address to 0",
              "fullTitle": "tests ChallengeFactory contract should should not be possible to deploy with a feeReceiver address to 0",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const ChallengeFactory = await ethers.getContractFactory('ChallengeFactory');\nawait expect(\n    ChallengeFactory.deploy(token.target, \"0x0000000000000000000000000000000000000000\")\n).to.be.revertedWith(\"the feeReceiver cannot be address 0!\")",
              "err": {},
              "uuid": "fa0e0ce0-b99a-4656-be88-1533ef8d7aea",
              "parentUUID": "814bd806-f8d4-448b-a784-045b940ad7ae",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should emit an event on new challenge deployment",
              "fullTitle": "tests ChallengeFactory contract should emit an event on new challenge deployment",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const filter = challengeFactory.filters.ChallengeCreated(signers[0].address);\n        const events = await challengeFactory.queryFilter(filter, -1)\n        const event = events[0]\n        expect(event.fragment.name).to.equal('ChallengeCreated')\n        const args = event.args\n        expect(args.admin).to.equal(signers[0].address)",
              "err": {},
              "uuid": "b307d789-72b0-4655-b309-11e8e7b16318",
              "parentUUID": "814bd806-f8d4-448b-a784-045b940ad7ae",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should allow to deploy a new challenge contract",
              "fullTitle": "tests ChallengeFactory contract should allow to deploy a new challenge contract",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// 2. Extract the address from the event\n        const filter = challengeFactory.filters.ChallengeCreated;\n        const events = await challengeFactory.queryFilter(filter, -1)\n        const event = events[0]\n        const newContractAddress = event.args.challengeAddress;\n        // 3. Attach to the deployed challenge\n        const Challenge = await ethers.getContractFactory(\"Challenge\");\n        const challenge = Challenge.attach(newContractAddress);\n        // Verify initialisation\n        const _duration = await challenge.duration();\n        const _maxPlayers = await challenge.maxPlayers();\n        const _bid = await challenge.bid();\n        const _description = await challenge.description();\n        expect(_duration).to.equal(1000n);\n        expect(_maxPlayers).to.equal(5n);\n        expect(_bid).to.equal(bid);\n        expect(_description).to.equal(\"test\")",
              "err": {},
              "uuid": "d043ddd2-2894-43c6-bceb-6d7d38d0964f",
              "parentUUID": "814bd806-f8d4-448b-a784-045b940ad7ae",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should set the caller of the function createChallenge as owner of the challenge",
              "fullTitle": "tests ChallengeFactory contract should set the caller of the function createChallenge as owner of the challenge",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// 2. Extract the address from the event\n        const filter = challengeFactory.filters.ChallengeCreated;\n        const events = await challengeFactory.queryFilter(filter, -1)\n        const event = events[0]\n        const newContractAddress = event.args.challengeAddress;\n        // 3. Attach to the deployed challenge\n        const Challenge = await ethers.getContractFactory(\"Challenge\");\n        const challenge = Challenge.attach(newContractAddress);\n        const owner = await challenge.owner()\n        expect(owner).to.equal(signers[0].address)",
              "err": {},
              "uuid": "da035184-928b-4fdf-b8b0-dd3b60805fd4",
              "parentUUID": "814bd806-f8d4-448b-a784-045b940ad7ae",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be possible to access to all challenges previously created ",
              "fullTitle": "tests ChallengeFactory contract should be possible to access to all challenges previously created ",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// 1. Call factory to create 2 more challenge contracts\nawait challengeFactory.createChallenge(duration, maxPlayers, bid, description, 0, []);\nawait challengeFactory.createChallenge(duration, maxPlayers, bid, description, 0, []);\n// 2. Extract the addresses from the events\nconst filter = challengeFactory.filters.ChallengeCreated;\nconst events = await challengeFactory.queryFilter(filter, 0, \"latest\")\nconst addresses = events.map((event) => event.args.challengeAddress);\n// console.log(\"deployed contract addresses : \", addresses)\n//Contract ABI\nconst Challenge = await ethers.getContractFactory(\"Challenge\");\nfor (const addr of addresses) {\n    const challengeContract = Challenge.attach(addr);\n    // Now you can call read-only functions to confirm it's really a deployed contract of this type\n    const _duration = await challengeContract.duration();\n    expect(_duration).to.equal(1000n); // simple check that contract responds\n}",
              "err": {},
              "uuid": "f4bac5bb-ab67-429a-adce-9d4def978686",
              "parentUUID": "814bd806-f8d4-448b-a784-045b940ad7ae",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "43b0f787-e8e0-4fc3-852f-cb5093423f5a",
            "fa0e0ce0-b99a-4656-be88-1533ef8d7aea",
            "b307d789-72b0-4655-b309-11e8e7b16318",
            "d043ddd2-2894-43c6-bceb-6d7d38d0964f",
            "da035184-928b-4fdf-b8b0-dd3b60805fd4",
            "f4bac5bb-ab67-429a-adce-9d4def978686"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 31,
          "root": false,
          "rootEmpty": false,
          "_timeout": 40000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 40000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": true,
        "reportFilename": "report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "test-report",
        "reportFilename": "report",
        "quiet": true
      },
      "version": "6.2.0"
    }
  }
}