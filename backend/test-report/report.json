{
  "stats": {
    "suites": 3,
    "tests": 4,
    "passes": 4,
    "pending": 0,
    "failures": 0,
    "start": "2025-09-07T19:11:27.129Z",
    "end": "2025-09-07T19:11:27.545Z",
    "duration": 416,
    "testsRegistered": 4,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "ec870ce1-a1f4-44b7-8625-1b0bcf1473ee",
      "title": "",
      "fullFile": "/home/ibuntu/BlockchainDev/Alyra/MyTests/PROJET_FINAL/backend/test/Challenge NEW.test.js",
      "file": "/test/Challenge NEW.test.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "494bda44-926c-4d6f-9980-4f35ea8c77b0",
          "title": "tests Challenge contract",
          "fullFile": "/home/ibuntu/BlockchainDev/Alyra/MyTests/PROJET_FINAL/backend/test/Challenge NEW.test.js",
          "file": "/test/Challenge NEW.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "812ded7f-1ca0-404a-b90f-80501399410d",
              "title": "deployment",
              "fullFile": "/home/ibuntu/BlockchainDev/Alyra/MyTests/PROJET_FINAL/backend/test/Challenge NEW.test.js",
              "file": "/test/Challenge NEW.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"deployment\"",
                  "fullTitle": "tests Challenge contract deployment \"before each\" hook in \"deployment\"",
                  "timedOut": false,
                  "duration": 7,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "signers = await ethers.getSigners();\n//Token deployment\nconst DareWinToken = await ethers.getContractFactory('DareWinNew');\ntoken = await DareWinToken.deploy(signers[0].address);\nbid = ethers.parseUnits(\"1000\", await token.decimals());",
                  "err": {},
                  "uuid": "dc42d407-c794-4c18-a78b-b45ec70aed14",
                  "parentUUID": "812ded7f-1ca0-404a-b90f-80501399410d",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should juste deploy the contract",
                  "fullTitle": "tests Challenge contract deployment should juste deploy the contract",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//Challenge Deployment\nconst Challenge = await ethers.getContractFactory('ChallengeNew'); \nawait expect(\n    Challenge.deploy(signers[0].address, token.target, duration, maxPlayers, bid, description, signers[0].address, false, [])\n).to.not.be.reverted",
                  "err": {},
                  "uuid": "e41135bc-9b85-4b33-8fe9-df940eb4a2ff",
                  "parentUUID": "812ded7f-1ca0-404a-b90f-80501399410d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not be possible to deploy with a feeReceiver address to 0",
                  "fullTitle": "tests Challenge contract deployment should not be possible to deploy with a feeReceiver address to 0",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//Challenge Deployment\nconst Challenge = await ethers.getContractFactory('ChallengeNew'); \nawait expect(\n    Challenge.deploy(signers[0].address, token.target, duration, maxPlayers, bid, description, \"0x0000000000000000000000000000000000000000\", false, [])\n).to.be.revertedWith(\"the feeReceiver cannot be address 0!\")",
                  "err": {},
                  "uuid": "09757f12-9e48-49b0-9c81-04177201347e",
                  "parentUUID": "812ded7f-1ca0-404a-b90f-80501399410d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "GROUP MODE : should not be possible to deploy if one player in the array is address 0",
                  "fullTitle": "tests Challenge contract deployment GROUP MODE : should not be possible to deploy if one player in the array is address 0",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//Challenge Deployment\nconst Challenge = await ethers.getContractFactory('ChallengeNew'); \nconst playersArray = [signers[0].address, signers[1].address, \"0x0000000000000000000000000000000000000000\"]\nawait expect(\n    Challenge.deploy(signers[0].address, token.target, duration, maxPlayers, bid, description, signers[0].address, true, playersArray)\n).to.be.revertedWith(\"address 0 cannot be a player!\")",
                  "err": {},
                  "uuid": "019a37ad-f355-4f34-b5f2-ba15ebc3cec1",
                  "parentUUID": "812ded7f-1ca0-404a-b90f-80501399410d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e41135bc-9b85-4b33-8fe9-df940eb4a2ff",
                "09757f12-9e48-49b0-9c81-04177201347e",
                "019a37ad-f355-4f34-b5f2-ba15ebc3cec1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 21,
              "root": false,
              "rootEmpty": false,
              "_timeout": 40000
            },
            {
              "uuid": "47472237-1555-4ed7-95d6-778bff56050b",
              "title": "gathering players state",
              "fullFile": "/home/ibuntu/BlockchainDev/Alyra/MyTests/PROJET_FINAL/backend/test/Challenge NEW.test.js",
              "file": "/test/Challenge NEW.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"gathering players state\"",
                  "fullTitle": "tests Challenge contract gathering players state \"before each\" hook in \"gathering players state\"",
                  "timedOut": false,
                  "duration": 25,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "({challenge, signers, bid, token} = await loadFixture(deployedChallengeFixtureBase));",
                  "err": {},
                  "uuid": "74e6bdec-41a4-4eb9-8828-77017b484f45",
                  "parentUUID": "47472237-1555-4ed7-95d6-778bff56050b",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should send the money to the challenge contract correctly",
                  "fullTitle": "tests Challenge contract gathering players state should send the money to the challenge contract correctly",
                  "timedOut": false,
                  "duration": 29,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const {sig, deadline} = await GetRSVsig(signers[0], token, bid, challenge);\nconst v = sig.v ?? (27 + sig.yParity);\nconsole.log(sig)\nconsole.log(deadline)\nconsole.log(v)\nexpect(\n    await token.balanceOf(challenge)\n).to.equal(0)\nawait expect(challenge.joinChallenge(signers[0].address, challenge.target, bid, deadline, v, sig.r, sig.s))\n.to.not.be.reverted;\n\nexpect(\n    await token.balanceOf(challenge)\n).to.equal(bid)",
                  "err": {},
                  "uuid": "7456fb87-758c-46be-8538-a68b2f4df45c",
                  "parentUUID": "47472237-1555-4ed7-95d6-778bff56050b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7456fb87-758c-46be-8538-a68b2f4df45c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 29,
              "root": false,
              "rootEmpty": false,
              "_timeout": 40000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 40000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 40000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": true,
        "reportFilename": "report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "test-report",
        "reportFilename": "report",
        "quiet": true
      },
      "version": "6.2.0"
    }
  }
}