{
  "stats": {
    "suites": 5,
    "tests": 16,
    "passes": 16,
    "pending": 0,
    "failures": 0,
    "start": "2025-09-10T11:25:36.136Z",
    "end": "2025-09-10T11:25:36.873Z",
    "duration": 737,
    "testsRegistered": 16,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "a67f9ecb-ae9e-49a8-a213-3aad3476fab9",
      "title": "",
      "fullFile": "/home/ibuntu/BlockchainDev/Alyra/MyTests/PROJET_FINAL/backend/test/Challenge NEW.test.js",
      "file": "/test/Challenge NEW.test.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "bd14f2d0-9238-4ec3-86c6-d2d829077815",
          "title": "tests Challenge contract",
          "fullFile": "/home/ibuntu/BlockchainDev/Alyra/MyTests/PROJET_FINAL/backend/test/Challenge NEW.test.js",
          "file": "/test/Challenge NEW.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "35b4280f-6c46-4814-97e1-8b397d51809b",
              "title": "deployment",
              "fullFile": "/home/ibuntu/BlockchainDev/Alyra/MyTests/PROJET_FINAL/backend/test/Challenge NEW.test.js",
              "file": "/test/Challenge NEW.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"deployment\"",
                  "fullTitle": "tests Challenge contract deployment \"before each\" hook in \"deployment\"",
                  "timedOut": false,
                  "duration": 7,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "signers = await ethers.getSigners();\n//Token deployment\nconst DareWinToken = await ethers.getContractFactory('DareWinNew');\ntoken = await DareWinToken.deploy(signers[0].address);\nbid = ethers.parseUnits(\"1000\", await token.decimals());",
                  "err": {},
                  "uuid": "c721993c-02ee-40c7-9a8c-868d2dc8e64c",
                  "parentUUID": "35b4280f-6c46-4814-97e1-8b397d51809b",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should juste deploy the contract",
                  "fullTitle": "tests Challenge contract deployment should juste deploy the contract",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//Challenge Deployment\nconst Challenge = await ethers.getContractFactory('ChallengeNew'); \nawait expect(\n    Challenge.deploy(signers[0].address, token.target, duration, maxPlayers, bid, description, signers[0].address, false, ethers.ZeroHash)\n).to.not.be.reverted",
                  "err": {},
                  "uuid": "d406ebd5-5719-4662-88a1-378458a34d0f",
                  "parentUUID": "35b4280f-6c46-4814-97e1-8b397d51809b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should juste deploy the contract in Group mode",
                  "fullTitle": "tests Challenge contract deployment should juste deploy the contract in Group mode",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const playersAllowed = [\n    [signers[0].address],\n    [signers[1].address],\n    [signers[2].address],\n    [signers[3].address],\n    [signers[4].address]\n]\nmerkleTree = StandardMerkleTree.of(playersAllowed, [\"address\"]);\nconst Challenge = await ethers.getContractFactory('ChallengeNew');\n//Challenge Deployment\nawait expect(\n    challenge = await Challenge.deploy(signers[0].address, token.target, duration, maxPlayers, bid, description, signers[0].address, true, merkleTree.root)\n).to.not.be.reverted",
                  "err": {},
                  "uuid": "73f7071d-497f-4a04-9afb-e65bbe6bffd6",
                  "parentUUID": "35b4280f-6c46-4814-97e1-8b397d51809b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not be possible to deploy with a feeReceiver address to 0",
                  "fullTitle": "tests Challenge contract deployment should not be possible to deploy with a feeReceiver address to 0",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//Challenge Deployment\nconst Challenge = await ethers.getContractFactory('ChallengeNew'); \nawait expect(\n    Challenge.deploy(signers[0].address, token.target, duration, maxPlayers, bid, description, \"0x0000000000000000000000000000000000000000\", false, ethers.ZeroHash)\n).to.be.revertedWith(\"the feeReceiver cannot be address 0!\")",
                  "err": {},
                  "uuid": "5d8ecd77-12f0-44c3-9546-2c48cd080c2a",
                  "parentUUID": "35b4280f-6c46-4814-97e1-8b397d51809b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "GROUP MODE : should not be possible to deploy if the merkle root is 0",
                  "fullTitle": "tests Challenge contract deployment GROUP MODE : should not be possible to deploy if the merkle root is 0",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//Challenge Deployment\nconst Challenge = await ethers.getContractFactory('ChallengeNew'); \nawait expect(\n    Challenge.deploy(signers[0].address, token.target, duration, maxPlayers, bid, description, signers[0].address, true, ethers.ZeroHash)\n).to.be.revertedWith(\"Merkle root required when groupMode is true\")",
                  "err": {},
                  "uuid": "10d183aa-a0b7-4ee4-a81f-02020ffefc96",
                  "parentUUID": "35b4280f-6c46-4814-97e1-8b397d51809b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d406ebd5-5719-4662-88a1-378458a34d0f",
                "73f7071d-497f-4a04-9afb-e65bbe6bffd6",
                "5d8ecd77-12f0-44c3-9546-2c48cd080c2a",
                "10d183aa-a0b7-4ee4-a81f-02020ffefc96"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 34,
              "root": false,
              "rootEmpty": false,
              "_timeout": 40000
            },
            {
              "uuid": "8d690af6-06b3-4b62-91d6-48253338f442",
              "title": "gathering players state",
              "fullFile": "/home/ibuntu/BlockchainDev/Alyra/MyTests/PROJET_FINAL/backend/test/Challenge NEW.test.js",
              "file": "/test/Challenge NEW.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"gathering players state\"",
                  "fullTitle": "tests Challenge contract gathering players state \"before each\" hook in \"gathering players state\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "({challenge, signers, bid, token} = await loadFixture(deployedChallengeFixtureBase));",
                  "err": {},
                  "uuid": "c5789565-f3d7-4a4c-851d-118b3954e14f",
                  "parentUUID": "8d690af6-06b3-4b62-91d6-48253338f442",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should send the money to the challenge contract correctly",
                  "fullTitle": "tests Challenge contract gathering players state should send the money to the challenge contract correctly",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { v, r, s, deadline } = await GetRSVsig(signers[0], token, bid, challenge);\nexpect(\n    await token.balanceOf(challenge)\n).to.equal(0)\nawait expect(\n    challenge.joinChallenge(deadline, v, r, s, [])\n)\n.to.not.be.reverted;\n\nexpect(\n    await token.balanceOf(challenge)\n).to.equal(bid)",
                  "err": {},
                  "uuid": "a8af2bf1-9a3c-41ef-875b-c3f3b826fde9",
                  "parentUUID": "8d690af6-06b3-4b62-91d6-48253338f442",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should store a player in the players array (if sending enough money)",
                  "fullTitle": "tests Challenge contract gathering players state should store a player in the players array (if sending enough money)",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { v: v1, r: r1, s: s1, deadline: deadline1 } = await GetRSVsig(signers[0], token, bid, challenge);\n           const { v: v2, r: r2, s: s2, deadline: deadline2 } = await GetRSVsig(signers[1], token, bid, challenge);\n           await expect(challenge.joinChallenge(deadline1, v1, r1, s1, []))\n           .to.not.be.reverted;\n           await expect(challenge.connect(signers[1]).joinChallenge(deadline2, v2, r2, s2, []))\n           .to.not.be.reverted;\n           // const player1 = await challenge.players(0);\n           // expect(player1[0]).to.equal(signers[0].address);\n           // const player2 = await challenge.players(1);\n           // expect(player2[0]).to.equal(signers[1].address);",
                  "err": {},
                  "uuid": "7cf94e24-8d6c-49fe-9b8b-7cf9e32923c4",
                  "parentUUID": "8d690af6-06b3-4b62-91d6-48253338f442",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "FOR LINK MODE : should not allow any more participants to join if the max is already reached",
                  "fullTitle": "tests Challenge contract gathering players state FOR LINK MODE : should not allow any more participants to join if the max is already reached",
                  "timedOut": false,
                  "duration": 24,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { v: v1, r: r1, s: s1, deadline: deadline1 } = await GetRSVsig(signers[0], token, bid, challenge);\nconst { v: v2, r: r2, s: s2, deadline: deadline2 } = await GetRSVsig(signers[1], token, bid, challenge);\nconst { v: v3, r: r3, s: s3, deadline: deadline3 } = await GetRSVsig(signers[2], token, bid, challenge);\nconst { v: v4, r: r4, s: s4, deadline: deadline4 } = await GetRSVsig(signers[3], token, bid, challenge);\nconst { v: v5, r: r5, s: s5, deadline: deadline5 } = await GetRSVsig(signers[4], token, bid, challenge);\nconst { v: v6, r: r6, s: s6, deadline: deadline6 } = await GetRSVsig(signers[5], token, bid, challenge);\nawait challenge.joinChallenge(deadline1, v1, r1, s1, []);\nawait challenge.connect(signers[1]).joinChallenge(deadline2, v2, r2, s2, []);\nawait challenge.connect(signers[2]).joinChallenge(deadline3, v3, r3, s3, []);\nawait challenge.connect(signers[3]).joinChallenge(deadline4, v4, r4, s4, []);\nawait challenge.connect(signers[4]).joinChallenge(deadline5, v5, r5, s5, []);\n// const player1 = await challenge.players(0);\n// expect(player1[0]).to.equal(signers[0].address);\n// const player2 = await challenge.players(1);\n// expect(player2[0]).to.equal(signers[1].address);\n// const player3 = await challenge.players(2);\n// expect(player3[0]).to.equal(signers[2].address);\n// const player4 = await challenge.players(3);\n// expect(player4[0]).to.equal(signers[3].address);\n// const player5 = await challenge.players(4);\n// expect(player5[0]).to.equal(signers[4].address);\nawait expect(\n    challenge.connect(signers[5]).joinChallenge(deadline6, v6, r6, s6, [])\n).to.be.revertedWith(\"This challenge is already full\");",
                  "err": {},
                  "uuid": "637b53d3-035e-4413-91fe-9b91fccf602f",
                  "parentUUID": "8d690af6-06b3-4b62-91d6-48253338f442",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow a participant to join twice",
                  "fullTitle": "tests Challenge contract gathering players state should not allow a participant to join twice",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { v: v1, r: r1, s: s1, deadline: deadline1 } = await GetRSVsig(signers[0], token, bid, challenge);\nawait challenge.joinChallenge(deadline1, v1, r1, s1, []);\nawait expect(challenge.joinChallenge(deadline1, v1, r1, s1, [])).to.be.revertedWith(\"You already joined\");",
                  "err": {},
                  "uuid": "3becee53-29f3-43bb-b76c-8a3403b4f39b",
                  "parentUUID": "8d690af6-06b3-4b62-91d6-48253338f442",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow a player to withdraw from the challenge (before start), while letting the challenge start when required without issues. Money should be sent back to him??",
                  "fullTitle": "tests Challenge contract gathering players state should allow a player to withdraw from the challenge (before start), while letting the challenge start when required without issues. Money should be sent back to him??",
                  "timedOut": false,
                  "duration": 24,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//5 players join\nconst { v: v1, r: r1, s: s1, deadline: deadline1 } = await GetRSVsig(signers[0], token, bid, challenge);\nconst { v: v2, r: r2, s: s2, deadline: deadline2 } = await GetRSVsig(signers[1], token, bid, challenge);\nconst { v: v3, r: r3, s: s3, deadline: deadline3 } = await GetRSVsig(signers[2], token, bid, challenge);\nconst { v: v4, r: r4, s: s4, deadline: deadline4 } = await GetRSVsig(signers[3], token, bid, challenge);\nconst { v: v5, r: r5, s: s5, deadline: deadline5 } = await GetRSVsig(signers[4], token, bid, challenge);\nawait challenge.joinChallenge(deadline1, v1, r1, s1, []);\nawait challenge.connect(signers[1]).joinChallenge(deadline2, v2, r2, s2, []);\nawait challenge.connect(signers[2]).joinChallenge(deadline3, v3, r3, s3, []);\nawait challenge.connect(signers[3]).joinChallenge(deadline4, v4, r4, s4, []);\nawait challenge.connect(signers[4]).joinChallenge(deadline5, v5, r5, s5, []);\n//one player withdraws from challenge\nexpect(\n    await token.balanceOf(signers[2].address)\n).to.equal(0);\nawait challenge.connect(signers[2]).withdrawFromChallenge();\n//His balance should be 1000\nexpect(\n    await token.balanceOf(signers[2].address)\n).to.equal(bid);\n// const player1 = await challenge.players(0);\n// expect(player1[0]).to.equal(signers[0].address);\n// const player2 = await challenge.players(1);\n// expect(player2[0]).to.equal(signers[1].address);\n// const player3 = await challenge.players(2);\n// expect(player3[0]).to.equal(signers[4].address);\n// const player4 = await challenge.players(3);\n// expect(player4[0]).to.equal(signers[3].address);\n// //the 3rd player should not be in the array anymore, this should revert\n// await expect(\n//     challenge.players(4)\n// ).to.be.reverted;\n//Admin successfully starts challenge\nawait challenge.startChallenge();\nexpect(\n   await challenge.currentStatus()\n).to.equal(ChallengeStatus.OngoingChallenge);",
                  "err": {},
                  "uuid": "6d4c0cdb-145a-46c5-881a-96c83ccdb1be",
                  "parentUUID": "8d690af6-06b3-4b62-91d6-48253338f442",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow a player to withdraw from the challenge if he hasnt joined",
                  "fullTitle": "tests Challenge contract gathering players state should not allow a player to withdraw from the challenge if he hasnt joined",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//try to withdraw without having joined, reverts\nawait expect(\n   challenge.withdrawFromChallenge()\n).to.be.revertedWith(\"You have not joined the challenge.\");",
                  "err": {},
                  "uuid": "3c655ac4-466d-4cc7-8c40-ac0091c59208",
                  "parentUUID": "8d690af6-06b3-4b62-91d6-48253338f442",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow a player to join, withdraw and then join again the challenge",
                  "fullTitle": "tests Challenge contract gathering players state should allow a player to join, withdraw and then join again the challenge",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//Needed twice, because of the nonce\nconst { v: v1, r: r1, s: s1, deadline: deadline1 } = await GetRSVsig(signers[0], token, bid, challenge);\n\nawait challenge.joinChallenge(deadline1, v1, r1, s1, []);\nawait challenge.withdrawFromChallenge();\nconst { v: v2, r: r2, s: s2, deadline: deadline2 } = await GetRSVsig(signers[0], token, bid, challenge);\nawait expect(\n   challenge.joinChallenge(deadline2, v2, r2, s2, [])\n).to.not.be.reverted",
                  "err": {},
                  "uuid": "f63e92d3-6df3-4a2b-8956-b43e1c2fcfdd",
                  "parentUUID": "8d690af6-06b3-4b62-91d6-48253338f442",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow to start the challenge if there is less than 2 players",
                  "fullTitle": "tests Challenge contract gathering players state should not allow to start the challenge if there is less than 2 players",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { v: v1, r: r1, s: s1, deadline: deadline1 } = await GetRSVsig(signers[0], token, bid, challenge);\nawait challenge.joinChallenge(deadline1, v1, r1, s1, []);\nawait expect(\n    challenge.startChallenge()\n).to.be.revertedWith(\"Not enough players to start the challenge\")",
                  "err": {},
                  "uuid": "b637d773-2a33-4a2d-b077-2107885e7de8",
                  "parentUUID": "8d690af6-06b3-4b62-91d6-48253338f442",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow the admin to go to the next state",
                  "fullTitle": "tests Challenge contract gathering players state should allow the admin to go to the next state",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { v: v1, r: r1, s: s1, deadline: deadline1 } = await GetRSVsig(signers[0], token, bid, challenge);\nconst { v: v2, r: r2, s: s2, deadline: deadline2 } = await GetRSVsig(signers[1], token, bid, challenge);\nawait challenge.joinChallenge(deadline1, v1, r1, s1, []);\nawait challenge.connect(signers[1]).joinChallenge(deadline2, v2, r2, s2, []);\nawait challenge.startChallenge();\nexpect(\n   await challenge.currentStatus()\n).to.equal(ChallengeStatus.OngoingChallenge);",
                  "err": {},
                  "uuid": "2dead4bb-9db6-4fcb-b1e6-9399296cf409",
                  "parentUUID": "8d690af6-06b3-4b62-91d6-48253338f442",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a8af2bf1-9a3c-41ef-875b-c3f3b826fde9",
                "7cf94e24-8d6c-49fe-9b8b-7cf9e32923c4",
                "637b53d3-035e-4413-91fe-9b91fccf602f",
                "3becee53-29f3-43bb-b76c-8a3403b4f39b",
                "6d4c0cdb-145a-46c5-881a-96c83ccdb1be",
                "3c655ac4-466d-4cc7-8c40-ac0091c59208",
                "f63e92d3-6df3-4a2b-8956-b43e1c2fcfdd",
                "b637d773-2a33-4a2d-b077-2107885e7de8",
                "2dead4bb-9db6-4fcb-b1e6-9399296cf409"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 94,
              "root": false,
              "rootEmpty": false,
              "_timeout": 40000
            },
            {
              "uuid": "8974ed8f-5801-4cd0-83b2-478a32e5fe55",
              "title": "gathering players state (FOR GROUP MODE SPECIFIC TESTS)",
              "fullFile": "/home/ibuntu/BlockchainDev/Alyra/MyTests/PROJET_FINAL/backend/test/Challenge NEW.test.js",
              "file": "/test/Challenge NEW.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"gathering players state (FOR GROUP MODE SPECIFIC TESTS)\"",
                  "fullTitle": "tests Challenge contract gathering players state (FOR GROUP MODE SPECIFIC TESTS) \"before each\" hook in \"gathering players state (FOR GROUP MODE SPECIFIC TESTS)\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//Deploying in group mode\n({challenge, signers, bid, token, merkleTree} = await loadFixture(groupModeFixture));",
                  "err": {},
                  "uuid": "5cd51473-dc25-4c09-aecd-425bdec5bef1",
                  "parentUUID": "8974ed8f-5801-4cd0-83b2-478a32e5fe55",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "FOR GROUP MODE : should still allow players to join",
                  "fullTitle": "tests Challenge contract gathering players state (FOR GROUP MODE SPECIFIC TESTS) FOR GROUP MODE : should still allow players to join",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { v: v1, r: r1, s: s1, deadline: deadline1 } = await GetRSVsig(signers[0], token, bid, challenge);\n            const { v: v2, r: r2, s: s2, deadline: deadline2 } = await GetRSVsig(signers[1], token, bid, challenge);\n            const { v: v3, r: r3, s: s3, deadline: deadline3 } = await GetRSVsig(signers[2], token, bid, challenge);\n            const { v: v4, r: r4, s: s4, deadline: deadline4 } = await GetRSVsig(signers[3], token, bid, challenge);\n            //Get merkle proof for each player\n            const proof1 = merkleTree.getProof([signers[0].address]);\n            const proof2 = merkleTree.getProof([signers[1].address]);\n            const proof3 = merkleTree.getProof([signers[2].address]);\n            const proof4 = merkleTree.getProof([signers[3].address]);\n            //join with proof\n            await expect(\n                challenge.connect(signers[0]).joinChallenge(deadline1, v1, r1, s1, proof1)\n            ).to.not.be.reverted;\n            await expect(\n                challenge.connect(signers[1]).joinChallenge(deadline2, v2, r2, s2, proof2)\n            ).to.not.be.reverted;\n            await expect(\n                challenge.connect(signers[2]).joinChallenge(deadline3, v3, r3, s3, proof3)\n            ).to.not.be.reverted;\n            await expect(\n                challenge.connect(signers[3]).joinChallenge(deadline4, v4, r4, s4, proof4)\n            ).to.not.be.reverted;\n            \n            // const player1 = await challenge.players(0);\n            // expect(player1[0]).to.equal(signers[0].address);\n            // const player2 = await challenge.players(1);\n            // expect(player2[0]).to.equal(signers[1].address);\n            // const player3 = await challenge.players(2);\n            // expect(player3[0]).to.equal(signers[2].address);\n            // const player4 = await challenge.players(3);\n            // expect(player4[0]).to.equal(signers[3].address);",
                  "err": {},
                  "uuid": "06d4886e-3ff2-410e-8fea-ad774c011a94",
                  "parentUUID": "8974ed8f-5801-4cd0-83b2-478a32e5fe55",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "FOR GROUP MODE : should not allow a player to join if he is not among those chosen by the admin at creation",
                  "fullTitle": "tests Challenge contract gathering players state (FOR GROUP MODE SPECIFIC TESTS) FOR GROUP MODE : should not allow a player to join if he is not among those chosen by the admin at creation",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { v: v1, r: r1, s: s1, deadline: deadline1 } = await GetRSVsig(signers[5], token, bid, challenge);\nconst proof1 = merkleTree.getProof([signers[0].address]);\nawait expect(\n    challenge.connect(signers[5]).joinChallenge(deadline1, v1, r1, s1, proof1)\n).to.be.revertedWith(\"You are not allowed to join this challenge.\")",
                  "err": {},
                  "uuid": "20017752-2c06-438d-8d01-753818c3b53c",
                  "parentUUID": "8974ed8f-5801-4cd0-83b2-478a32e5fe55",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "06d4886e-3ff2-410e-8fea-ad774c011a94",
                "20017752-2c06-438d-8d01-753818c3b53c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 25,
              "root": false,
              "rootEmpty": false,
              "_timeout": 40000
            },
            {
              "uuid": "c3c5c50b-7ade-46f7-9237-04f94be557be",
              "title": "ongoing challenge state",
              "fullFile": "/home/ibuntu/BlockchainDev/Alyra/MyTests/PROJET_FINAL/backend/test/Challenge NEW.test.js",
              "file": "/test/Challenge NEW.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"ongoing challenge state\"",
                  "fullTitle": "tests Challenge contract ongoing challenge state \"before each\" hook in \"ongoing challenge state\"",
                  "timedOut": false,
                  "duration": 72,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "({challenge, signers} = await loadFixture(OngoingChallengeFixture));",
                  "err": {},
                  "uuid": "a35bcdbc-f23c-44f9-8f2f-6a146d092f4e",
                  "parentUUID": "c3c5c50b-7ade-46f7-9237-04f94be557be",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "state should be \"OngoingChallenge\" during the challenge. ",
                  "fullTitle": "tests Challenge contract ongoing challenge state state should be \"OngoingChallenge\" during the challenge. ",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(await challenge.currentStatus()).to.equal(ChallengeStatus.OngoingChallenge);",
                  "err": {},
                  "uuid": "8e69f6f2-953d-46d1-b10e-b8e4f209c799",
                  "parentUUID": "c3c5c50b-7ade-46f7-9237-04f94be557be",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8e69f6f2-953d-46d1-b10e-b8e4f209c799"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 40000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 40000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 40000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": true,
        "reportFilename": "report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "test-report",
        "reportFilename": "report",
        "quiet": true
      },
      "version": "6.2.0"
    }
  }
}