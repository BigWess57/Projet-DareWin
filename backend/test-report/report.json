{
  "stats": {
    "suites": 5,
    "tests": 15,
    "passes": 15,
    "pending": 0,
    "failures": 0,
    "start": "2025-09-09T12:44:51.627Z",
    "end": "2025-09-09T12:44:52.287Z",
    "duration": 660,
    "testsRegistered": 15,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "7fa8bfcf-3fe3-4287-abf3-f86bd2fb377c",
      "title": "",
      "fullFile": "/home/ibuntu/BlockchainDev/Alyra/MyTests/PROJET_FINAL/backend/test/Challenge NEW.test.js",
      "file": "/test/Challenge NEW.test.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "e8030b02-58a5-450c-8b76-ead7208d38a4",
          "title": "tests Challenge contract",
          "fullFile": "/home/ibuntu/BlockchainDev/Alyra/MyTests/PROJET_FINAL/backend/test/Challenge NEW.test.js",
          "file": "/test/Challenge NEW.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "88f41d1e-0756-4f97-8114-e2fb5f6dc8b3",
              "title": "deployment",
              "fullFile": "/home/ibuntu/BlockchainDev/Alyra/MyTests/PROJET_FINAL/backend/test/Challenge NEW.test.js",
              "file": "/test/Challenge NEW.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"deployment\"",
                  "fullTitle": "tests Challenge contract deployment \"before each\" hook in \"deployment\"",
                  "timedOut": false,
                  "duration": 16,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "signers = await ethers.getSigners();\n//Token deployment\nconst DareWinToken = await ethers.getContractFactory('DareWinNew');\ntoken = await DareWinToken.deploy(signers[0].address);\nbid = ethers.parseUnits(\"1000\", await token.decimals());",
                  "err": {},
                  "uuid": "6048143c-1398-40d1-ad14-69fe0becb7f1",
                  "parentUUID": "88f41d1e-0756-4f97-8114-e2fb5f6dc8b3",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should juste deploy the contract",
                  "fullTitle": "tests Challenge contract deployment should juste deploy the contract",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//Challenge Deployment\nconst Challenge = await ethers.getContractFactory('ChallengeNew'); \nawait expect(\n    Challenge.deploy(signers[0].address, token.target, duration, maxPlayers, bid, description, signers[0].address, false, [])\n).to.not.be.reverted",
                  "err": {},
                  "uuid": "7bfe7178-d1a6-420c-920d-18b723c304dc",
                  "parentUUID": "88f41d1e-0756-4f97-8114-e2fb5f6dc8b3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not be possible to deploy with a feeReceiver address to 0",
                  "fullTitle": "tests Challenge contract deployment should not be possible to deploy with a feeReceiver address to 0",
                  "timedOut": false,
                  "duration": 16,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//Challenge Deployment\nconst Challenge = await ethers.getContractFactory('ChallengeNew'); \nawait expect(\n    Challenge.deploy(signers[0].address, token.target, duration, maxPlayers, bid, description, \"0x0000000000000000000000000000000000000000\", false, [])\n).to.be.revertedWith(\"the feeReceiver cannot be address 0!\")",
                  "err": {},
                  "uuid": "82cab4c2-7479-4fa1-81af-ab037a2468f1",
                  "parentUUID": "88f41d1e-0756-4f97-8114-e2fb5f6dc8b3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "GROUP MODE : should not be possible to deploy if one player in the array is address 0",
                  "fullTitle": "tests Challenge contract deployment GROUP MODE : should not be possible to deploy if one player in the array is address 0",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//Challenge Deployment\nconst Challenge = await ethers.getContractFactory('ChallengeNew'); \nconst playersArray = [signers[0].address, signers[1].address, \"0x0000000000000000000000000000000000000000\"]\nawait expect(\n    Challenge.deploy(signers[0].address, token.target, duration, maxPlayers, bid, description, signers[0].address, true, playersArray)\n).to.be.revertedWith(\"address 0 cannot be a player!\")",
                  "err": {},
                  "uuid": "fff865cf-07ce-4046-aed0-673e06352375",
                  "parentUUID": "88f41d1e-0756-4f97-8114-e2fb5f6dc8b3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7bfe7178-d1a6-420c-920d-18b723c304dc",
                "82cab4c2-7479-4fa1-81af-ab037a2468f1",
                "fff865cf-07ce-4046-aed0-673e06352375"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 35,
              "root": false,
              "rootEmpty": false,
              "_timeout": 40000
            },
            {
              "uuid": "98218733-f02c-40b4-8ee5-67bddbfb5c67",
              "title": "gathering players state",
              "fullFile": "/home/ibuntu/BlockchainDev/Alyra/MyTests/PROJET_FINAL/backend/test/Challenge NEW.test.js",
              "file": "/test/Challenge NEW.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"gathering players state\"",
                  "fullTitle": "tests Challenge contract gathering players state \"before each\" hook in \"gathering players state\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "({challenge, signers, bid, token} = await loadFixture(deployedChallengeFixtureBase));",
                  "err": {},
                  "uuid": "d9ca3c87-e459-4a9f-87eb-0c52bf0e43a6",
                  "parentUUID": "98218733-f02c-40b4-8ee5-67bddbfb5c67",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should send the money to the challenge contract correctly",
                  "fullTitle": "tests Challenge contract gathering players state should send the money to the challenge contract correctly",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { v, r, s, deadline } = await GetRSVsig(signers[0], token, bid, challenge);\nexpect(\n    await token.balanceOf(challenge)\n).to.equal(0)\nawait expect(\n    challenge.joinChallenge(deadline, v, r, s)\n)\n.to.not.be.reverted;\n\nexpect(\n    await token.balanceOf(challenge)\n).to.equal(bid)",
                  "err": {},
                  "uuid": "77f2278f-b8ac-4d2a-aeac-21fd289574d9",
                  "parentUUID": "98218733-f02c-40b4-8ee5-67bddbfb5c67",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should store a player in the players array (if sending enough money)",
                  "fullTitle": "tests Challenge contract gathering players state should store a player in the players array (if sending enough money)",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { v: v1, r: r1, s: s1, deadline: deadline1 } = await GetRSVsig(signers[0], token, bid, challenge);\n           const { v: v2, r: r2, s: s2, deadline: deadline2 } = await GetRSVsig(signers[1], token, bid, challenge);\n           await expect(challenge.joinChallenge(deadline1, v1, r1, s1))\n           .to.not.be.reverted;\n           await expect(challenge.connect(signers[1]).joinChallenge(deadline2, v2, r2, s2))\n           .to.not.be.reverted;\n           // const player1 = await challenge.players(0);\n           // expect(player1[0]).to.equal(signers[0].address);\n           // const player2 = await challenge.players(1);\n           // expect(player2[0]).to.equal(signers[1].address);",
                  "err": {},
                  "uuid": "bb03aa1e-6797-446d-9d50-b2efda56981b",
                  "parentUUID": "98218733-f02c-40b4-8ee5-67bddbfb5c67",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "FOR LINK MODE : should not allow any more participants to join if the max is already reached",
                  "fullTitle": "tests Challenge contract gathering players state FOR LINK MODE : should not allow any more participants to join if the max is already reached",
                  "timedOut": false,
                  "duration": 26,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { v: v1, r: r1, s: s1, deadline: deadline1 } = await GetRSVsig(signers[0], token, bid, challenge);\nconst { v: v2, r: r2, s: s2, deadline: deadline2 } = await GetRSVsig(signers[1], token, bid, challenge);\nconst { v: v3, r: r3, s: s3, deadline: deadline3 } = await GetRSVsig(signers[2], token, bid, challenge);\nconst { v: v4, r: r4, s: s4, deadline: deadline4 } = await GetRSVsig(signers[3], token, bid, challenge);\nconst { v: v5, r: r5, s: s5, deadline: deadline5 } = await GetRSVsig(signers[4], token, bid, challenge);\nconst { v: v6, r: r6, s: s6, deadline: deadline6 } = await GetRSVsig(signers[5], token, bid, challenge);\nawait challenge.joinChallenge(deadline1, v1, r1, s1);\nawait challenge.connect(signers[1]).joinChallenge(deadline2, v2, r2, s2);\nawait challenge.connect(signers[2]).joinChallenge(deadline3, v3, r3, s3);\nawait challenge.connect(signers[3]).joinChallenge(deadline4, v4, r4, s4);\nawait challenge.connect(signers[4]).joinChallenge(deadline5, v5, r5, s5);\n// const player1 = await challenge.players(0);\n// expect(player1[0]).to.equal(signers[0].address);\n// const player2 = await challenge.players(1);\n// expect(player2[0]).to.equal(signers[1].address);\n// const player3 = await challenge.players(2);\n// expect(player3[0]).to.equal(signers[2].address);\n// const player4 = await challenge.players(3);\n// expect(player4[0]).to.equal(signers[3].address);\n// const player5 = await challenge.players(4);\n// expect(player5[0]).to.equal(signers[4].address);\nawait expect(\n    challenge.connect(signers[5]).joinChallenge(deadline6, v6, r6, s6)\n).to.be.revertedWith(\"This challenge is already full\");",
                  "err": {},
                  "uuid": "039d5799-5079-45a4-aba6-a8ee240a9598",
                  "parentUUID": "98218733-f02c-40b4-8ee5-67bddbfb5c67",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow a participant to join twice",
                  "fullTitle": "tests Challenge contract gathering players state should not allow a participant to join twice",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { v: v1, r: r1, s: s1, deadline: deadline1 } = await GetRSVsig(signers[0], token, bid, challenge);\nawait challenge.joinChallenge(deadline1, v1, r1, s1);\nawait expect(challenge.joinChallenge(deadline1, v1, r1, s1)).to.be.revertedWith(\"You already joined\");",
                  "err": {},
                  "uuid": "12a0c0f5-061a-4497-8f9f-5169a8a9d5be",
                  "parentUUID": "98218733-f02c-40b4-8ee5-67bddbfb5c67",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow a player to withdraw from the challenge (before start), while letting the challenge start when required without issues. Money should be sent back to him??",
                  "fullTitle": "tests Challenge contract gathering players state should allow a player to withdraw from the challenge (before start), while letting the challenge start when required without issues. Money should be sent back to him??",
                  "timedOut": false,
                  "duration": 23,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//5 players join\nconst { v: v1, r: r1, s: s1, deadline: deadline1 } = await GetRSVsig(signers[0], token, bid, challenge);\nconst { v: v2, r: r2, s: s2, deadline: deadline2 } = await GetRSVsig(signers[1], token, bid, challenge);\nconst { v: v3, r: r3, s: s3, deadline: deadline3 } = await GetRSVsig(signers[2], token, bid, challenge);\nconst { v: v4, r: r4, s: s4, deadline: deadline4 } = await GetRSVsig(signers[3], token, bid, challenge);\nconst { v: v5, r: r5, s: s5, deadline: deadline5 } = await GetRSVsig(signers[4], token, bid, challenge);\nawait challenge.joinChallenge(deadline1, v1, r1, s1);\nawait challenge.connect(signers[1]).joinChallenge(deadline2, v2, r2, s2);\nawait challenge.connect(signers[2]).joinChallenge(deadline3, v3, r3, s3);\nawait challenge.connect(signers[3]).joinChallenge(deadline4, v4, r4, s4);\nawait challenge.connect(signers[4]).joinChallenge(deadline5, v5, r5, s5);\n//one player withdraws from challenge\nexpect(\n    await token.balanceOf(signers[2].address)\n).to.equal(0);\nawait challenge.connect(signers[2]).withdrawFromChallenge();\n//His balance should be 1000\nexpect(\n    await token.balanceOf(signers[2].address)\n).to.equal(bid);\n// const player1 = await challenge.players(0);\n// expect(player1[0]).to.equal(signers[0].address);\n// const player2 = await challenge.players(1);\n// expect(player2[0]).to.equal(signers[1].address);\n// const player3 = await challenge.players(2);\n// expect(player3[0]).to.equal(signers[4].address);\n// const player4 = await challenge.players(3);\n// expect(player4[0]).to.equal(signers[3].address);\n// //the 3rd player should not be in the array anymore, this should revert\n// await expect(\n//     challenge.players(4)\n// ).to.be.reverted;\n//Admin successfully starts challenge\nawait challenge.startChallenge();\nexpect(\n   await challenge.currentStatus()\n).to.equal(ChallengeStatus.OngoingChallenge);",
                  "err": {},
                  "uuid": "8630afb3-be67-45b0-a150-b1104f8ada03",
                  "parentUUID": "98218733-f02c-40b4-8ee5-67bddbfb5c67",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow a player to withdraw from the challenge if he hasnt joined",
                  "fullTitle": "tests Challenge contract gathering players state should not allow a player to withdraw from the challenge if he hasnt joined",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//try to withdraw without having joined, reverts\nawait expect(\n   challenge.withdrawFromChallenge()\n).to.be.revertedWith(\"You have not joined the challenge.\");",
                  "err": {},
                  "uuid": "6fe17fd7-43ae-49c2-9f02-299916e6bcac",
                  "parentUUID": "98218733-f02c-40b4-8ee5-67bddbfb5c67",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow a player to join, withdraw and then join again the challenge",
                  "fullTitle": "tests Challenge contract gathering players state should allow a player to join, withdraw and then join again the challenge",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//Needed twice, because of the nonce\nconst { v: v1, r: r1, s: s1, deadline: deadline1 } = await GetRSVsig(signers[0], token, bid, challenge);\n\nawait challenge.joinChallenge(deadline1, v1, r1, s1);\nawait challenge.withdrawFromChallenge();\nconst { v: v2, r: r2, s: s2, deadline: deadline2 } = await GetRSVsig(signers[0], token, bid, challenge);\nawait expect(\n   challenge.joinChallenge(deadline2, v2, r2, s2)\n).to.not.be.reverted",
                  "err": {},
                  "uuid": "5324dc2e-978a-4e53-a64a-0483d94df79d",
                  "parentUUID": "98218733-f02c-40b4-8ee5-67bddbfb5c67",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow to start the challenge if there is less than 2 players",
                  "fullTitle": "tests Challenge contract gathering players state should not allow to start the challenge if there is less than 2 players",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { v: v1, r: r1, s: s1, deadline: deadline1 } = await GetRSVsig(signers[0], token, bid, challenge);\nawait challenge.joinChallenge(deadline1, v1, r1, s1);\nawait expect(\n    challenge.startChallenge()\n).to.be.revertedWith(\"Not enough players to start the challenge\")",
                  "err": {},
                  "uuid": "45788edd-a0f0-4066-b439-d06d300250d4",
                  "parentUUID": "98218733-f02c-40b4-8ee5-67bddbfb5c67",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow the admin to go to the next state",
                  "fullTitle": "tests Challenge contract gathering players state should allow the admin to go to the next state",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { v: v1, r: r1, s: s1, deadline: deadline1 } = await GetRSVsig(signers[0], token, bid, challenge);\nconst { v: v2, r: r2, s: s2, deadline: deadline2 } = await GetRSVsig(signers[1], token, bid, challenge);\nawait challenge.joinChallenge(deadline1, v1, r1, s1);\nawait challenge.connect(signers[1]).joinChallenge(deadline2, v2, r2, s2);\nawait challenge.startChallenge();\nexpect(\n   await challenge.currentStatus()\n).to.equal(ChallengeStatus.OngoingChallenge);",
                  "err": {},
                  "uuid": "34a41231-2c0e-47c6-bd31-a7ce0464371d",
                  "parentUUID": "98218733-f02c-40b4-8ee5-67bddbfb5c67",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "77f2278f-b8ac-4d2a-aeac-21fd289574d9",
                "bb03aa1e-6797-446d-9d50-b2efda56981b",
                "039d5799-5079-45a4-aba6-a8ee240a9598",
                "12a0c0f5-061a-4497-8f9f-5169a8a9d5be",
                "8630afb3-be67-45b0-a150-b1104f8ada03",
                "6fe17fd7-43ae-49c2-9f02-299916e6bcac",
                "5324dc2e-978a-4e53-a64a-0483d94df79d",
                "45788edd-a0f0-4066-b439-d06d300250d4",
                "34a41231-2c0e-47c6-bd31-a7ce0464371d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 94,
              "root": false,
              "rootEmpty": false,
              "_timeout": 40000
            },
            {
              "uuid": "407a1b42-3780-4b00-9429-6789e2437cb7",
              "title": "gathering players state (FOR GROUP MODE SPECIFIC TESTS)",
              "fullFile": "/home/ibuntu/BlockchainDev/Alyra/MyTests/PROJET_FINAL/backend/test/Challenge NEW.test.js",
              "file": "/test/Challenge NEW.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"gathering players state (FOR GROUP MODE SPECIFIC TESTS)\"",
                  "fullTitle": "tests Challenge contract gathering players state (FOR GROUP MODE SPECIFIC TESTS) \"before each\" hook in \"gathering players state (FOR GROUP MODE SPECIFIC TESTS)\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//Deploying in group mode\n({challenge, signers, bid, token} = await loadFixture(groupModeFixture));",
                  "err": {},
                  "uuid": "ae5d1e4c-9c4d-44c1-9247-dc8f92f04745",
                  "parentUUID": "407a1b42-3780-4b00-9429-6789e2437cb7",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "FOR GROUP MODE : should still allow players to join",
                  "fullTitle": "tests Challenge contract gathering players state (FOR GROUP MODE SPECIFIC TESTS) FOR GROUP MODE : should still allow players to join",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { v: v1, r: r1, s: s1, deadline: deadline1 } = await GetRSVsig(signers[0], token, bid, challenge);\nconst { v: v2, r: r2, s: s2, deadline: deadline2 } = await GetRSVsig(signers[1], token, bid, challenge);\nconst { v: v3, r: r3, s: s3, deadline: deadline3 } = await GetRSVsig(signers[2], token, bid, challenge);\nconst { v: v4, r: r4, s: s4, deadline: deadline4 } = await GetRSVsig(signers[3], token, bid, challenge);\nawait challenge.connect(signers[0]).joinChallenge(deadline1, v1, r1, s1)\nawait challenge.connect(signers[1]).joinChallenge(deadline2, v2, r2, s2)\nawait challenge.connect(signers[2]).joinChallenge(deadline3, v3, r3, s3)\nawait challenge.connect(signers[3]).joinChallenge(deadline4, v4, r4, s4)\n\n// const player1 = await challenge.players(0);\n// expect(player1[0]).to.equal(signers[0].address);\n// const player2 = await challenge.players(1);\n// expect(player2[0]).to.equal(signers[1].address);\n// const player3 = await challenge.players(2);\n// expect(player3[0]).to.equal(signers[2].address);\n// const player4 = await challenge.players(3);\n// expect(player4[0]).to.equal(signers[3].address);",
                  "err": {},
                  "uuid": "8c069f28-64a8-4d03-9e3a-e6ffe7187c08",
                  "parentUUID": "407a1b42-3780-4b00-9429-6789e2437cb7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "FOR GROUP MODE : should not allow a player to join if he is not among those chosen by the admin at creation",
                  "fullTitle": "tests Challenge contract gathering players state (FOR GROUP MODE SPECIFIC TESTS) FOR GROUP MODE : should not allow a player to join if he is not among those chosen by the admin at creation",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { v: v1, r: r1, s: s1, deadline: deadline1 } = await GetRSVsig(signers[5], token, bid, challenge);\nawait expect(\n    challenge.connect(signers[5]).joinChallenge(deadline1, v1, r1, s1)\n).to.be.revertedWith(\"You are not allowed to join this challenge.\")",
                  "err": {},
                  "uuid": "fd6c26d1-251c-480f-8e28-0464237120e3",
                  "parentUUID": "407a1b42-3780-4b00-9429-6789e2437cb7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8c069f28-64a8-4d03-9e3a-e6ffe7187c08",
                "fd6c26d1-251c-480f-8e28-0464237120e3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 16,
              "root": false,
              "rootEmpty": false,
              "_timeout": 40000
            },
            {
              "uuid": "15f6feec-c6a5-409c-b840-a3155a4f3403",
              "title": "ongoing challenge state",
              "fullFile": "/home/ibuntu/BlockchainDev/Alyra/MyTests/PROJET_FINAL/backend/test/Challenge NEW.test.js",
              "file": "/test/Challenge NEW.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"ongoing challenge state\"",
                  "fullTitle": "tests Challenge contract ongoing challenge state \"before each\" hook in \"ongoing challenge state\"",
                  "timedOut": false,
                  "duration": 41,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "({challenge, signers} = await loadFixture(OngoingChallengeFixture));",
                  "err": {},
                  "uuid": "d837643a-0175-40c8-a189-c3c64e42bbd3",
                  "parentUUID": "15f6feec-c6a5-409c-b840-a3155a4f3403",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "state should be \"OngoingChallenge\" during the challenge. ",
                  "fullTitle": "tests Challenge contract ongoing challenge state state should be \"OngoingChallenge\" during the challenge. ",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(await challenge.currentStatus()).to.equal(ChallengeStatus.OngoingChallenge);",
                  "err": {},
                  "uuid": "11af7b9b-2d88-49f0-8731-c4fcb75cccc5",
                  "parentUUID": "15f6feec-c6a5-409c-b840-a3155a4f3403",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "11af7b9b-2d88-49f0-8731-c4fcb75cccc5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 40000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 40000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 40000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": true,
        "reportFilename": "report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "test-report",
        "reportFilename": "report",
        "quiet": true
      },
      "version": "6.2.0"
    }
  }
}