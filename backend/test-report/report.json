{
  "stats": {
    "suites": 14,
    "tests": 54,
    "passes": 54,
    "pending": 0,
    "failures": 0,
    "start": "2025-09-11T17:50:17.456Z",
    "end": "2025-09-11T17:50:18.845Z",
    "duration": 1389,
    "testsRegistered": 54,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "9ecb138e-902a-43dd-98f7-b42f4f14e802",
      "title": "",
      "fullFile": "/home/ibuntu/BlockchainDev/Alyra/MyTests/PROJET_FINAL/backend/test/Challenge NEW.test.js",
      "file": "/test/Challenge NEW.test.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "8671d67e-4966-4d74-95d8-e9b63d8e55e1",
          "title": "tests Challenge contract",
          "fullFile": "/home/ibuntu/BlockchainDev/Alyra/MyTests/PROJET_FINAL/backend/test/Challenge NEW.test.js",
          "file": "/test/Challenge NEW.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "89206a97-9df0-488e-ba03-a8fe5cc090dd",
              "title": "deployment",
              "fullFile": "/home/ibuntu/BlockchainDev/Alyra/MyTests/PROJET_FINAL/backend/test/Challenge NEW.test.js",
              "file": "/test/Challenge NEW.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"deployment\"",
                  "fullTitle": "tests Challenge contract deployment \"before each\" hook in \"deployment\"",
                  "timedOut": false,
                  "duration": 9,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "signers = await ethers.getSigners();\n//Token deployment\nconst DareWinToken = await ethers.getContractFactory('DareWinNew');\ntoken = await DareWinToken.deploy(signers[0].address);\nbid = ethers.parseUnits(\"1000\", await token.decimals());",
                  "err": {},
                  "uuid": "091c70b0-c476-411a-bd85-98f73408b25c",
                  "parentUUID": "89206a97-9df0-488e-ba03-a8fe5cc090dd",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should juste deploy the contract",
                  "fullTitle": "tests Challenge contract deployment should juste deploy the contract",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//Challenge Deployment\nconst Challenge = await ethers.getContractFactory('ChallengeNew'); \nawait expect(\n    Challenge.deploy(signers[0].address, token.target, duration, maxPlayers, bid, description, signers[0].address, false, ethers.ZeroHash)\n).to.not.be.reverted",
                  "err": {},
                  "uuid": "633c2d25-d150-443a-a424-0170b07bb1ea",
                  "parentUUID": "89206a97-9df0-488e-ba03-a8fe5cc090dd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should juste deploy the contract in Group mode",
                  "fullTitle": "tests Challenge contract deployment should juste deploy the contract in Group mode",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const playersAllowed = [\n    [signers[0].address],\n    [signers[1].address],\n    [signers[2].address],\n    [signers[3].address],\n    [signers[4].address]\n]\nmerkleTree = StandardMerkleTree.of(playersAllowed, [\"address\"]);\nconst Challenge = await ethers.getContractFactory('ChallengeNew');\n//Challenge Deployment\nawait expect(\n    challenge = await Challenge.deploy(signers[0].address, token.target, duration, maxPlayers, bid, description, signers[0].address, true, merkleTree.root)\n).to.not.be.reverted",
                  "err": {},
                  "uuid": "be46366f-f941-4aae-b4b7-3345b36b3941",
                  "parentUUID": "89206a97-9df0-488e-ba03-a8fe5cc090dd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not be possible to deploy with a feeReceiver address to 0",
                  "fullTitle": "tests Challenge contract deployment should not be possible to deploy with a feeReceiver address to 0",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//Challenge Deployment\nconst Challenge = await ethers.getContractFactory('ChallengeNew'); \nawait expect(\n    Challenge.deploy(signers[0].address, token.target, duration, maxPlayers, bid, description, \"0x0000000000000000000000000000000000000000\", false, ethers.ZeroHash)\n).to.be.revertedWith(\"the feeReceiver cannot be address 0!\")",
                  "err": {},
                  "uuid": "239379cf-117b-49ee-ba15-2bcf9ec26963",
                  "parentUUID": "89206a97-9df0-488e-ba03-a8fe5cc090dd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "GROUP MODE : should not be possible to deploy if the merkle root is 0",
                  "fullTitle": "tests Challenge contract deployment GROUP MODE : should not be possible to deploy if the merkle root is 0",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//Challenge Deployment\nconst Challenge = await ethers.getContractFactory('ChallengeNew'); \nawait expect(\n    Challenge.deploy(signers[0].address, token.target, duration, maxPlayers, bid, description, signers[0].address, true, ethers.ZeroHash)\n).to.be.revertedWith(\"Merkle root required when groupMode is true\")",
                  "err": {},
                  "uuid": "fcf04795-41c6-4f37-a251-438a38695eeb",
                  "parentUUID": "89206a97-9df0-488e-ba03-a8fe5cc090dd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "633c2d25-d150-443a-a424-0170b07bb1ea",
                "be46366f-f941-4aae-b4b7-3345b36b3941",
                "239379cf-117b-49ee-ba15-2bcf9ec26963",
                "fcf04795-41c6-4f37-a251-438a38695eeb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 42,
              "root": false,
              "rootEmpty": false,
              "_timeout": 40000
            },
            {
              "uuid": "79df79f3-1db6-4556-a952-4c30fc943967",
              "title": "gathering players state",
              "fullFile": "/home/ibuntu/BlockchainDev/Alyra/MyTests/PROJET_FINAL/backend/test/Challenge NEW.test.js",
              "file": "/test/Challenge NEW.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"gathering players state\"",
                  "fullTitle": "tests Challenge contract gathering players state \"before each\" hook in \"gathering players state\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "({challenge, signers, bid, token} = await loadFixture(deployedChallengeFixtureBase));",
                  "err": {},
                  "uuid": "44251655-7187-4a88-a368-428cdafda155",
                  "parentUUID": "79df79f3-1db6-4556-a952-4c30fc943967",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should allow a player to join, and sends the money to the challenge contract correctly",
                  "fullTitle": "tests Challenge contract gathering players state should allow a player to join, and sends the money to the challenge contract correctly",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { v, r, s, deadline } = await GetRSVsig(signers[0], token, bid, challenge);\nexpect(\n    await token.balanceOf(challenge)\n).to.equal(0)\n// console.log(\"v : \", v)\n// console.log(\"r : \", r)\n// console.log(\"s : \", s)\n// console.log(\"deadline : \", deadline)\nawait expect(\n    challenge.joinChallenge(deadline, v, r, s, [])\n)\n.to.not.be.reverted;\n\nexpect(\n    await token.balanceOf(challenge)\n).to.equal(bid)",
                  "err": {},
                  "uuid": "3e67deeb-d381-4b2a-98ea-3fbfd5b9cf7e",
                  "parentUUID": "79df79f3-1db6-4556-a952-4c30fc943967",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "FOR LINK MODE : should not allow any more participants to join if the max is already reached",
                  "fullTitle": "tests Challenge contract gathering players state FOR LINK MODE : should not allow any more participants to join if the max is already reached",
                  "timedOut": false,
                  "duration": 30,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { v: v1, r: r1, s: s1, deadline: deadline1 } = await GetRSVsig(signers[0], token, bid, challenge);\nconst { v: v2, r: r2, s: s2, deadline: deadline2 } = await GetRSVsig(signers[1], token, bid, challenge);\nconst { v: v3, r: r3, s: s3, deadline: deadline3 } = await GetRSVsig(signers[2], token, bid, challenge);\nconst { v: v4, r: r4, s: s4, deadline: deadline4 } = await GetRSVsig(signers[3], token, bid, challenge);\nconst { v: v5, r: r5, s: s5, deadline: deadline5 } = await GetRSVsig(signers[4], token, bid, challenge);\nconst { v: v6, r: r6, s: s6, deadline: deadline6 } = await GetRSVsig(signers[5], token, bid, challenge);\nawait challenge.joinChallenge(deadline1, v1, r1, s1, []);\nawait challenge.connect(signers[1]).joinChallenge(deadline2, v2, r2, s2, []);\nawait challenge.connect(signers[2]).joinChallenge(deadline3, v3, r3, s3, []);\nawait challenge.connect(signers[3]).joinChallenge(deadline4, v4, r4, s4, []);\nawait challenge.connect(signers[4]).joinChallenge(deadline5, v5, r5, s5, []);\n// const player1 = await challenge.players(0);\n// expect(player1[0]).to.equal(signers[0].address);\n// const player2 = await challenge.players(1);\n// expect(player2[0]).to.equal(signers[1].address);\n// const player3 = await challenge.players(2);\n// expect(player3[0]).to.equal(signers[2].address);\n// const player4 = await challenge.players(3);\n// expect(player4[0]).to.equal(signers[3].address);\n// const player5 = await challenge.players(4);\n// expect(player5[0]).to.equal(signers[4].address);\nawait expect(\n    challenge.connect(signers[5]).joinChallenge(deadline6, v6, r6, s6, [])\n).to.be.revertedWith(\"This challenge is already full\");",
                  "err": {},
                  "uuid": "8e2962ea-4f96-41fb-abea-c5ae066e00fb",
                  "parentUUID": "79df79f3-1db6-4556-a952-4c30fc943967",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow a participant to join twice",
                  "fullTitle": "tests Challenge contract gathering players state should not allow a participant to join twice",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { v: v1, r: r1, s: s1, deadline: deadline1 } = await GetRSVsig(signers[0], token, bid, challenge);\nawait challenge.joinChallenge(deadline1, v1, r1, s1, []);\nawait expect(challenge.joinChallenge(deadline1, v1, r1, s1, [])).to.be.revertedWith(\"You already joined\");",
                  "err": {},
                  "uuid": "4893ba9f-c450-4060-b423-3dd8e3e96c01",
                  "parentUUID": "79df79f3-1db6-4556-a952-4c30fc943967",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow a player to withdraw from the challenge (before start), while letting the challenge start when required without issues. Money should be sent back to him",
                  "fullTitle": "tests Challenge contract gathering players state should allow a player to withdraw from the challenge (before start), while letting the challenge start when required without issues. Money should be sent back to him",
                  "timedOut": false,
                  "duration": 25,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//5 players join\nconst { v: v1, r: r1, s: s1, deadline: deadline1 } = await GetRSVsig(signers[0], token, bid, challenge);\nconst { v: v2, r: r2, s: s2, deadline: deadline2 } = await GetRSVsig(signers[1], token, bid, challenge);\nconst { v: v3, r: r3, s: s3, deadline: deadline3 } = await GetRSVsig(signers[2], token, bid, challenge);\nconst { v: v4, r: r4, s: s4, deadline: deadline4 } = await GetRSVsig(signers[3], token, bid, challenge);\nconst { v: v5, r: r5, s: s5, deadline: deadline5 } = await GetRSVsig(signers[4], token, bid, challenge);\nawait challenge.joinChallenge(deadline1, v1, r1, s1, []);\nawait challenge.connect(signers[1]).joinChallenge(deadline2, v2, r2, s2, []);\nawait challenge.connect(signers[2]).joinChallenge(deadline3, v3, r3, s3, []);\nawait challenge.connect(signers[3]).joinChallenge(deadline4, v4, r4, s4, []);\nawait challenge.connect(signers[4]).joinChallenge(deadline5, v5, r5, s5, []);\n//one player withdraws from challenge\nexpect(\n    await token.balanceOf(signers[2].address)\n).to.equal(0);\nawait challenge.connect(signers[2]).withdrawFromChallenge();\n//His balance should be 1000\nexpect(\n    await token.balanceOf(signers[2].address)\n).to.equal(bid);\n// const player1 = await challenge.players(0);\n// expect(player1[0]).to.equal(signers[0].address);\n// const player2 = await challenge.players(1);\n// expect(player2[0]).to.equal(signers[1].address);\n// const player3 = await challenge.players(2);\n// expect(player3[0]).to.equal(signers[4].address);\n// const player4 = await challenge.players(3);\n// expect(player4[0]).to.equal(signers[3].address);\n// //the 3rd player should not be in the array anymore, this should revert\n// await expect(\n//     challenge.players(4)\n// ).to.be.reverted;\n//Admin successfully starts challenge\nawait challenge.startChallenge();\nexpect(\n   await challenge.currentStatus()\n).to.equal(ChallengeStatus.OngoingChallenge);",
                  "err": {},
                  "uuid": "dca78776-d56e-4758-9ae7-84550e1a8ef3",
                  "parentUUID": "79df79f3-1db6-4556-a952-4c30fc943967",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow a player to withdraw from the challenge if he hasnt joined",
                  "fullTitle": "tests Challenge contract gathering players state should not allow a player to withdraw from the challenge if he hasnt joined",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//try to withdraw without having joined, reverts\nawait expect(\n   challenge.withdrawFromChallenge()\n).to.be.revertedWith(\"You have not joined the challenge.\");",
                  "err": {},
                  "uuid": "51c49b62-6470-4402-a945-8aa737b324a2",
                  "parentUUID": "79df79f3-1db6-4556-a952-4c30fc943967",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow a player to join, withdraw and then join again the challenge",
                  "fullTitle": "tests Challenge contract gathering players state should allow a player to join, withdraw and then join again the challenge",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//Needed twice, because of the nonce\nconst { v: v1, r: r1, s: s1, deadline: deadline1 } = await GetRSVsig(signers[0], token, bid, challenge);\n\nawait challenge.joinChallenge(deadline1, v1, r1, s1, []);\nawait challenge.withdrawFromChallenge();\nconst { v: v2, r: r2, s: s2, deadline: deadline2 } = await GetRSVsig(signers[0], token, bid, challenge);\nawait expect(\n   challenge.joinChallenge(deadline2, v2, r2, s2, [])\n).to.not.be.reverted",
                  "err": {},
                  "uuid": "7bf9871a-3089-4fe0-a58f-140fad96ebb9",
                  "parentUUID": "79df79f3-1db6-4556-a952-4c30fc943967",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow to start the challenge if there is less than 2 players",
                  "fullTitle": "tests Challenge contract gathering players state should not allow to start the challenge if there is less than 2 players",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { v: v1, r: r1, s: s1, deadline: deadline1 } = await GetRSVsig(signers[0], token, bid, challenge);\nawait challenge.joinChallenge(deadline1, v1, r1, s1, []);\nawait expect(\n    challenge.startChallenge()\n).to.be.revertedWith(\"Not enough players to start the challenge\")",
                  "err": {},
                  "uuid": "09508ddb-eb6a-49f0-9af4-ffc2dc44725e",
                  "parentUUID": "79df79f3-1db6-4556-a952-4c30fc943967",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow the admin to go to the next state",
                  "fullTitle": "tests Challenge contract gathering players state should allow the admin to go to the next state",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { v: v1, r: r1, s: s1, deadline: deadline1 } = await GetRSVsig(signers[0], token, bid, challenge);\nconst { v: v2, r: r2, s: s2, deadline: deadline2 } = await GetRSVsig(signers[1], token, bid, challenge);\nawait challenge.joinChallenge(deadline1, v1, r1, s1, []);\nawait challenge.connect(signers[1]).joinChallenge(deadline2, v2, r2, s2, []);\nawait challenge.startChallenge();\nexpect(\n   await challenge.currentStatus()\n).to.equal(ChallengeStatus.OngoingChallenge);",
                  "err": {},
                  "uuid": "1e659848-93b6-4287-a663-c641467a9e9a",
                  "parentUUID": "79df79f3-1db6-4556-a952-4c30fc943967",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3e67deeb-d381-4b2a-98ea-3fbfd5b9cf7e",
                "8e2962ea-4f96-41fb-abea-c5ae066e00fb",
                "4893ba9f-c450-4060-b423-3dd8e3e96c01",
                "dca78776-d56e-4758-9ae7-84550e1a8ef3",
                "51c49b62-6470-4402-a945-8aa737b324a2",
                "7bf9871a-3089-4fe0-a58f-140fad96ebb9",
                "09508ddb-eb6a-49f0-9af4-ffc2dc44725e",
                "1e659848-93b6-4287-a663-c641467a9e9a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 101,
              "root": false,
              "rootEmpty": false,
              "_timeout": 40000
            },
            {
              "uuid": "8558a270-5e43-4672-a7bc-ada2e983a300",
              "title": "gathering players state (FOR GROUP MODE SPECIFIC TESTS)",
              "fullFile": "/home/ibuntu/BlockchainDev/Alyra/MyTests/PROJET_FINAL/backend/test/Challenge NEW.test.js",
              "file": "/test/Challenge NEW.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"gathering players state (FOR GROUP MODE SPECIFIC TESTS)\"",
                  "fullTitle": "tests Challenge contract gathering players state (FOR GROUP MODE SPECIFIC TESTS) \"before each\" hook in \"gathering players state (FOR GROUP MODE SPECIFIC TESTS)\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//Deploying in group mode\n({challenge, signers, bid, token, merkleTree} = await loadFixture(groupModeFixture));",
                  "err": {},
                  "uuid": "99f04d46-3355-4aaf-8822-2af3a5dd8d05",
                  "parentUUID": "8558a270-5e43-4672-a7bc-ada2e983a300",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "FOR GROUP MODE : should still allow players to join",
                  "fullTitle": "tests Challenge contract gathering players state (FOR GROUP MODE SPECIFIC TESTS) FOR GROUP MODE : should still allow players to join",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { v: v1, r: r1, s: s1, deadline: deadline1 } = await GetRSVsig(signers[0], token, bid, challenge);\n            const { v: v2, r: r2, s: s2, deadline: deadline2 } = await GetRSVsig(signers[1], token, bid, challenge);\n            const { v: v3, r: r3, s: s3, deadline: deadline3 } = await GetRSVsig(signers[2], token, bid, challenge);\n            const { v: v4, r: r4, s: s4, deadline: deadline4 } = await GetRSVsig(signers[3], token, bid, challenge);\n            //Get merkle proof for each player\n            const proof1 = merkleTree.getProof([signers[0].address]);\n            const proof2 = merkleTree.getProof([signers[1].address]);\n            const proof3 = merkleTree.getProof([signers[2].address]);\n            const proof4 = merkleTree.getProof([signers[3].address]);\n            //join with proof\n            await expect(\n                challenge.connect(signers[0]).joinChallenge(deadline1, v1, r1, s1, proof1)\n            ).to.not.be.reverted;\n            await expect(\n                challenge.connect(signers[1]).joinChallenge(deadline2, v2, r2, s2, proof2)\n            ).to.not.be.reverted;\n            await expect(\n                challenge.connect(signers[2]).joinChallenge(deadline3, v3, r3, s3, proof3)\n            ).to.not.be.reverted;\n            await expect(\n                challenge.connect(signers[3]).joinChallenge(deadline4, v4, r4, s4, proof4)\n            ).to.not.be.reverted;\n            \n            // const player1 = await challenge.players(0);\n            // expect(player1[0]).to.equal(signers[0].address);\n            // const player2 = await challenge.players(1);\n            // expect(player2[0]).to.equal(signers[1].address);\n            // const player3 = await challenge.players(2);\n            // expect(player3[0]).to.equal(signers[2].address);\n            // const player4 = await challenge.players(3);\n            // expect(player4[0]).to.equal(signers[3].address);",
                  "err": {},
                  "uuid": "10d15f8e-ca89-475a-b65b-7c002926af17",
                  "parentUUID": "8558a270-5e43-4672-a7bc-ada2e983a300",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "FOR GROUP MODE : should not allow a player to join if he is not among those chosen by the admin at creation",
                  "fullTitle": "tests Challenge contract gathering players state (FOR GROUP MODE SPECIFIC TESTS) FOR GROUP MODE : should not allow a player to join if he is not among those chosen by the admin at creation",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const { v: v1, r: r1, s: s1, deadline: deadline1 } = await GetRSVsig(signers[5], token, bid, challenge);\nconst proof1 = merkleTree.getProof([signers[0].address]);\nawait expect(\n    challenge.connect(signers[5]).joinChallenge(deadline1, v1, r1, s1, proof1)\n).to.be.revertedWith(\"You are not allowed to join this challenge.\")",
                  "err": {},
                  "uuid": "c6f2738d-cd5a-4dfb-a10b-83bb6d002e5b",
                  "parentUUID": "8558a270-5e43-4672-a7bc-ada2e983a300",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "10d15f8e-ca89-475a-b65b-7c002926af17",
                "c6f2738d-cd5a-4dfb-a10b-83bb6d002e5b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 25,
              "root": false,
              "rootEmpty": false,
              "_timeout": 40000
            },
            {
              "uuid": "b465a38e-4f49-44f9-9058-c192e6632298",
              "title": "ongoing challenge state",
              "fullFile": "/home/ibuntu/BlockchainDev/Alyra/MyTests/PROJET_FINAL/backend/test/Challenge NEW.test.js",
              "file": "/test/Challenge NEW.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"ongoing challenge state\"",
                  "fullTitle": "tests Challenge contract ongoing challenge state \"before each\" hook in \"ongoing challenge state\"",
                  "timedOut": false,
                  "duration": 53,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "({challenge, signers} = await loadFixture(OngoingChallengeFixture));",
                  "err": {},
                  "uuid": "a8c30bd2-260e-4dc3-8003-caea43b5a7b5",
                  "parentUUID": "b465a38e-4f49-44f9-9058-c192e6632298",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "state should be \"OngoingChallenge\" during the challenge. ",
                  "fullTitle": "tests Challenge contract ongoing challenge state state should be \"OngoingChallenge\" during the challenge. ",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(await challenge.currentStatus()).to.equal(ChallengeStatus.OngoingChallenge);",
                  "err": {},
                  "uuid": "1aea6e8d-5de1-44a0-8678-86a5e3765961",
                  "parentUUID": "b465a38e-4f49-44f9-9058-c192e6632298",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1aea6e8d-5de1-44a0-8678-86a5e3765961"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 40000
            },
            {
              "uuid": "5bd3dccb-ec47-4df4-9f73-76164511d9c3",
              "title": "voting for winner state",
              "fullFile": "/home/ibuntu/BlockchainDev/Alyra/MyTests/PROJET_FINAL/backend/test/Challenge NEW.test.js",
              "file": "/test/Challenge NEW.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"voting for winner state\"",
                  "fullTitle": "tests Challenge contract voting for winner state \"before each\" hook in \"voting for winner state\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "({challenge, signers} = await loadFixture(VotingForWinnerFixture));",
                  "err": {},
                  "uuid": "277e62c8-9bf0-48ea-8540-e458e7b019b1",
                  "parentUUID": "5bd3dccb-ec47-4df4-9f73-76164511d9c3",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should allow a player to vote (for another player).",
                  "fullTitle": "tests Challenge contract voting for winner state should allow a player to vote (for another player).",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await challenge.voteForWinner(signers[1].address);\n// const player2 = await challenge.players(1);\n// expect(player2[1]).to.equal(1);",
                  "err": {},
                  "uuid": "fa3aacf1-f0e0-485f-b1c7-ac6a1e2027d7",
                  "parentUUID": "5bd3dccb-ec47-4df4-9f73-76164511d9c3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow a non player to vote",
                  "fullTitle": "tests Challenge contract voting for winner state should not allow a non player to vote",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await expect(\n   challenge.connect(signers[5]).voteForWinner(signers[1].address)\n).to.be.revertedWith(\"You are not a player. You cannot vote for winner.\");",
                  "err": {},
                  "uuid": "5a3fedd8-9419-4ddb-a2df-c4df3f414e6a",
                  "parentUUID": "5bd3dccb-ec47-4df4-9f73-76164511d9c3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow a player to vote twice",
                  "fullTitle": "tests Challenge contract voting for winner state should not allow a player to vote twice",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await challenge.voteForWinner(signers[1].address);\nawait expect(\n   challenge.voteForWinner(signers[1].address)\n).to.be.revertedWith(\"You have already voted.\");",
                  "err": {},
                  "uuid": "0d886b22-e394-4a32-bafd-2ee6784334c9",
                  "parentUUID": "5bd3dccb-ec47-4df4-9f73-76164511d9c3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow to go to next state (ChallengeWon) if everyone has not voted (and minimum delay hasn't passed)",
                  "fullTitle": "tests Challenge contract voting for winner state should not allow to go to next state (ChallengeWon) if everyone has not voted (and minimum delay hasn't passed)",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await challenge.voteForWinner(signers[1].address)\nawait challenge.connect(signers[1]).voteForWinner(signers[1].address)\nawait expect(\n   challenge.endWinnerVote()\n).to.be.revertedWith(\"Not all player have voted for a winner yet (and minimum delay has not passed)\");",
                  "err": {},
                  "uuid": "7e54c620-da99-4387-858c-246117b8f9fe",
                  "parentUUID": "5bd3dccb-ec47-4df4-9f73-76164511d9c3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow ANYONE to go to next state (ChallengeWon) if everyone has not voted but minimum delay has passed",
                  "fullTitle": "tests Challenge contract voting for winner state should allow ANYONE to go to next state (ChallengeWon) if everyone has not voted but minimum delay has passed",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await challenge.voteForWinner(signers[1].address)\nawait challenge.connect(signers[1]).voteForWinner(signers[1].address)\n//Pass enough time\nawait time.increase(votingDelay);\nawait expect(\n   challenge.connect(signers[2]).endWinnerVote()\n).not.to.be.reverted;",
                  "err": {},
                  "uuid": "8e89ffc5-e50a-4890-b6da-b10d8e7d8bf3",
                  "parentUUID": "5bd3dccb-ec47-4df4-9f73-76164511d9c3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should allow ANYONE to go to next state (ChallengeWon) when everyone voted",
                  "fullTitle": "tests Challenge contract voting for winner state should allow ANYONE to go to next state (ChallengeWon) when everyone voted",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await challenge.voteForWinner(signers[1].address)\nawait challenge.connect(signers[1]).voteForWinner(signers[1].address) \nawait challenge.connect(signers[2]).voteForWinner(signers[2].address) \nawait challenge.connect(signers[3]).voteForWinner(signers[1].address) \nawait challenge.connect(signers[4]).voteForWinner(signers[2].address) \n//Any player can end vote, because everyone has voted\nawait challenge.connect(signers[1]).endWinnerVote();\nexpect(await challenge.currentStatus()).to.equal(ChallengeStatus.ChallengeWon);",
                  "err": {},
                  "uuid": "f39e75a3-49a0-45ef-8f6c-389fe3b4e6f5",
                  "parentUUID": "5bd3dccb-ec47-4df4-9f73-76164511d9c3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not allow ANYONE to go to next state (ChallengeWon) if no one has voted (even if time has passed)",
                  "fullTitle": "tests Challenge contract voting for winner state should not allow ANYONE to go to next state (ChallengeWon) if no one has voted (even if time has passed)",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//Pass enough time\n            await time.increase(votingDelay);\n            //Any player can end vote, because everyone has voted\n            await expect(challenge.connect(signers[1]).endWinnerVote()).to.be.revertedWith('Not allowed in this state');",
                  "err": {},
                  "uuid": "31c3de05-3ae9-4340-a000-74b1ba386532",
                  "parentUUID": "5bd3dccb-ec47-4df4-9f73-76164511d9c3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fa3aacf1-f0e0-485f-b1c7-ac6a1e2027d7",
                "5a3fedd8-9419-4ddb-a2df-c4df3f414e6a",
                "0d886b22-e394-4a32-bafd-2ee6784334c9",
                "7e54c620-da99-4387-858c-246117b8f9fe",
                "8e89ffc5-e50a-4890-b6da-b10d8e7d8bf3",
                "f39e75a3-49a0-45ef-8f6c-389fe3b4e6f5",
                "31c3de05-3ae9-4340-a000-74b1ba386532"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 28,
              "root": false,
              "rootEmpty": false,
              "_timeout": 40000
            },
            {
              "uuid": "06e9d162-7464-473f-9166-1180b8ecfedf",
              "title": "challenge won state",
              "fullFile": "/home/ibuntu/BlockchainDev/Alyra/MyTests/PROJET_FINAL/backend/test/Challenge NEW.test.js",
              "file": "/test/Challenge NEW.test.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"challenge won state\"",
                  "fullTitle": "tests Challenge contract challenge won state \"before each\" hook in \"challenge won state\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "({challenge, signers, bid, token} = await loadFixture(VotingForWinnerFixture));",
                  "err": {},
                  "uuid": "75fd7a8c-df75-41dc-abef-1f2360b369d7",
                  "parentUUID": "06e9d162-7464-473f-9166-1180b8ecfedf",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "winner should be able to retrieve prize when endWinnerVote() is triggered",
                  "fullTitle": "tests Challenge contract challenge won state winner should be able to retrieve prize when endWinnerVote() is triggered",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//Players voting\nawait challenge.voteForWinner(signers[1].address)\nawait challenge.connect(signers[1]).voteForWinner(signers[2].address) \nawait challenge.connect(signers[2]).voteForWinner(signers[2].address) \nawait challenge.connect(signers[3]).voteForWinner(signers[1].address) \nawait challenge.connect(signers[4]).voteForWinner(signers[2].address) \n//Check balance before\nconst balanceBefore = await token.balanceOf(signers[2].address);\n//End vote\nawait challenge.endWinnerVote();\nawait challenge.connect(signers[2]).withdrawPrize();\n//Check balance after\nconst balanceAfter = await token.balanceOf(signers[2].address);\nconst diff = balanceAfter - balanceBefore;\nconst expectedDiff = bid*5n - 5n*bid*bronze/100n;\n// const expectedDiff = bid*5n;\n//Difference should be equal to cash prize won\nexpect(diff).to.equal(expectedDiff); // substract fees too",
                  "err": {},
                  "uuid": "d6b9d1b4-477a-45b9-8b6c-b8b0774456ad",
                  "parentUUID": "06e9d162-7464-473f-9166-1180b8ecfedf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "winner should NOT be able to retrieve prize multiple times",
                  "fullTitle": "tests Challenge contract challenge won state winner should NOT be able to retrieve prize multiple times",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//Players voting\nawait challenge.voteForWinner(signers[1].address)\nawait challenge.connect(signers[1]).voteForWinner(signers[2].address) \nawait challenge.connect(signers[2]).voteForWinner(signers[2].address) \nawait challenge.connect(signers[3]).voteForWinner(signers[1].address) \nawait challenge.connect(signers[4]).voteForWinner(signers[2].address) \n//End vote\nawait challenge.endWinnerVote();\nawait challenge.connect(signers[2]).withdrawPrize();\nawait expect(\n    challenge.connect(signers[2]).withdrawPrize()\n).to.be.revertedWith(\"You have already withdrawn your prize\");",
                  "err": {},
                  "uuid": "92098abb-9518-48ef-8bbc-6a566cbcf8f9",
                  "parentUUID": "06e9d162-7464-473f-9166-1180b8ecfedf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "When there is a tie, should allow both winners to receive prize",
                  "fullTitle": "tests Challenge contract challenge won state When there is a tie, should allow both winners to receive prize",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//Players voting\nawait challenge.voteForWinner(signers[2].address)\nawait challenge.connect(signers[1]).voteForWinner(signers[1].address)\nawait challenge.connect(signers[2]).voteForWinner(signers[2].address)\nawait challenge.connect(signers[3]).voteForWinner(signers[1].address)\nawait challenge.connect(signers[4]).voteForWinner(signers[4].address)\n//Check balance before for both winners\nconst balanceBefore1 = await token.balanceOf(signers[1].address);\nconst balanceBefore2 = await token.balanceOf(signers[2].address);\n//End vote\nawait challenge.endWinnerVote();\n// const winner1 = await challenge.challengeWinners(0)\n// const winner2 = await challenge.challengeWinners(1)\n// expect(winner1).to.equal(signers[2].address);\n// expect(winner2).to.equal(signers[1].address);\nawait challenge.connect(signers[1]).withdrawPrize();\n//Check balance after (winner1)\nconst balanceAfter1 = await token.balanceOf(signers[1].address);\nconst diff1 = balanceAfter1 - balanceBefore1;\nconst expectedDiff1 = bid*5n/2n - bid*5n/2n*gold/100n;\nexpect(\n    diff1\n).to.equal(expectedDiff1);\nawait challenge.connect(signers[2]).withdrawPrize();\n//Check balance after (winner2)\nconst balanceAfter2 = await token.balanceOf(signers[2].address);\nconst diff2 = balanceAfter2 - balanceBefore2;\nconst expectedDiff2 = bid*5n/2n - bid*5n/2n*bronze/100n;\nexpect(\n    diff2\n).to.equal(expectedDiff2); //substract fees too",
                  "err": {},
                  "uuid": "e78484ce-8395-4fa3-b449-70ecc7ce041c",
                  "parentUUID": "06e9d162-7464-473f-9166-1180b8ecfedf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "if more tokens (signers[1] gold tier here) winner should receive more tokens",
                  "fullTitle": "tests Challenge contract challenge won state if more tokens (signers[1] gold tier here) winner should receive more tokens",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//Players voting\nawait challenge.voteForWinner(signers[1].address)\nawait challenge.connect(signers[1]).voteForWinner(signers[1].address) \nawait challenge.connect(signers[2]).voteForWinner(signers[1].address) \nawait challenge.connect(signers[3]).voteForWinner(signers[0].address) \nawait challenge.connect(signers[4]).voteForWinner(signers[2].address) \n//Check balance before\nconst balanceBefore = await token.balanceOf(signers[1].address);\n//End vote\nawait challenge.endWinnerVote();\nawait challenge.connect(signers[1]).withdrawPrize();\n//Check balance after\nconst balanceAfter = await token.balanceOf(signers[1].address);\nconst diff = balanceAfter - balanceBefore;\nconst expectedDiff = bid*5n - 5n*bid*gold/100n;\n//Difference should be equal to cash prize won\nexpect(diff).to.equal(expectedDiff); // substract fees too",
                  "err": {},
                  "uuid": "a0602448-1edf-4c33-bd02-49b040c5da61",
                  "parentUUID": "06e9d162-7464-473f-9166-1180b8ecfedf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "fee receiver should receive half of the fees (the rest is burnt)",
                  "fullTitle": "tests Challenge contract challenge won state fee receiver should receive half of the fees (the rest is burnt)",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//Players voting\nawait challenge.voteForWinner(signers[2].address)\nawait challenge.connect(signers[1]).voteForWinner(signers[2].address)\nawait challenge.connect(signers[2]).voteForWinner(signers[2].address)\nawait challenge.connect(signers[3]).voteForWinner(signers[1].address)\nawait challenge.connect(signers[4]).voteForWinner(signers[4].address)\nconst balanceBefore = await token.balanceOf(signers[0].address);\n//End vote\nawait challenge.endWinnerVote();\nawait challenge.connect(signers[2]).withdrawPrize();\nconst balanceAfter = await token.balanceOf(signers[0].address);\nconst diff = balanceAfter - balanceBefore;\nconst expectedFeesReceived = 5n*bid/2n*bronze/100n;\n\nexpect(\n    diff\n).to.equal(expectedFeesReceived);",
                  "err": {},
                  "uuid": "1d4cdda2-9d0a-4348-af54-e92a9fc56db9",
                  "parentUUID": "06e9d162-7464-473f-9166-1180b8ecfedf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "half of the fees should have been burnt",
                  "fullTitle": "tests Challenge contract challenge won state half of the fees should have been burnt",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//Players voting\nawait challenge.voteForWinner(signers[0].address)\nawait challenge.connect(signers[1]).voteForWinner(signers[0].address)\nawait challenge.connect(signers[2]).voteForWinner(signers[2].address)\nawait challenge.connect(signers[3]).voteForWinner(signers[1].address)\nawait challenge.connect(signers[4]).voteForWinner(signers[4].address)\nconst initialTotalSupply = await token.totalSupply();\n//End vote\nawait challenge.endWinnerVote();\nawait challenge.connect(signers[0]).withdrawPrize();\nconst finalTotalSupply = await token.totalSupply();\nconst diff = initialTotalSupply - finalTotalSupply;\nconst expectedBurntAmount = bid*5n/2n*platinum/100n;\n\nexpect(\n    diff\n).to.equal(expectedBurntAmount);",
                  "err": {},
                  "uuid": "0d899590-f7cf-40e0-9329-817fcbd30076",
                  "parentUUID": "06e9d162-7464-473f-9166-1180b8ecfedf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d6b9d1b4-477a-45b9-8b6c-b8b0774456ad",
                "92098abb-9518-48ef-8bbc-6a566cbcf8f9",
                "e78484ce-8395-4fa3-b449-70ecc7ce041c",
                "a0602448-1edf-4c33-bd02-49b040c5da61",
                "1d4cdda2-9d0a-4348-af54-e92a9fc56db9",
                "0d899590-f7cf-40e0-9329-817fcbd30076"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 68,
              "root": false,
              "rootEmpty": false,
              "_timeout": 40000
            },
            {
              "uuid": "e9513e7f-cc2b-456a-a8a4-c77165dcee95",
              "title": "Owner functions",
              "fullFile": "/home/ibuntu/BlockchainDev/Alyra/MyTests/PROJET_FINAL/backend/test/Challenge NEW.test.js",
              "file": "/test/Challenge NEW.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should not allow not admin player to go to OngoingChallenge state",
                  "fullTitle": "tests Challenge contract Owner functions should not allow not admin player to go to OngoingChallenge state",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const {challenge, signers} = await loadFixture(deployedChallengeFixtureBase);\nawait expect(\n   challenge.connect(signers[1]).startChallenge()\n).to.be.revertedWithCustomError(challenge, \"OwnableUnauthorizedAccount\").withArgs(signers[1].address);",
                  "err": {},
                  "uuid": "abc11824-aea8-4a15-a1a7-9f027c0c3495",
                  "parentUUID": "e9513e7f-cc2b-456a-a8a4-c77165dcee95",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "abc11824-aea8-4a15-a1a7-9f027c0c3495"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 8,
              "root": false,
              "rootEmpty": false,
              "_timeout": 40000
            },
            {
              "uuid": "ae9db212-6241-42cb-86c1-cc8ecc3f5de6",
              "title": "State functions availability",
              "fullFile": "/home/ibuntu/BlockchainDev/Alyra/MyTests/PROJET_FINAL/backend/test/Challenge NEW.test.js",
              "file": "/test/Challenge NEW.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "9be55ff0-44f9-4cc7-8691-9288dd378233",
                  "title": "state GatheringPlayers",
                  "fullFile": "/home/ibuntu/BlockchainDev/Alyra/MyTests/PROJET_FINAL/backend/test/Challenge NEW.test.js",
                  "file": "/test/Challenge NEW.test.js",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"state GatheringPlayers\"",
                      "fullTitle": "tests Challenge contract State functions availability state GatheringPlayers \"before each\" hook in \"state GatheringPlayers\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "({challenge, signers} = await loadFixture(deployedChallengeFixtureBase));",
                      "err": {},
                      "uuid": "12819e4c-cdfc-4f58-b1f0-e283610bc1fb",
                      "parentUUID": "9be55ff0-44f9-4cc7-8691-9288dd378233",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should not allow voteForWinner() in GatheringPlayers state",
                      "fullTitle": "tests Challenge contract State functions availability state GatheringPlayers should not allow voteForWinner() in GatheringPlayers state",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await expect(\n    challenge.voteForWinner(signers[1].address)\n).to.be.revertedWith(\"Not allowed in this state\");",
                      "err": {},
                      "uuid": "09d9dcc4-7db0-4702-b609-cb8458881c6b",
                      "parentUUID": "9be55ff0-44f9-4cc7-8691-9288dd378233",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow endWinnerVote() in GatheringPlayers state",
                      "fullTitle": "tests Challenge contract State functions availability state GatheringPlayers should not allow endWinnerVote() in GatheringPlayers state",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await expect(\n    challenge.endWinnerVote()\n).to.be.revertedWith(\"Not allowed in this state\");",
                      "err": {},
                      "uuid": "563e0889-271f-4427-b47b-abb1502d810a",
                      "parentUUID": "9be55ff0-44f9-4cc7-8691-9288dd378233",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow withdrawPrize() in GatheringPlayers state",
                      "fullTitle": "tests Challenge contract State functions availability state GatheringPlayers should not allow withdrawPrize() in GatheringPlayers state",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await expect(\n    challenge.withdrawPrize()\n).to.be.revertedWith(\"Not allowed in this state\");",
                      "err": {},
                      "uuid": "1a2d24dd-f762-472c-86d9-a6f3b402e1a1",
                      "parentUUID": "9be55ff0-44f9-4cc7-8691-9288dd378233",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "09d9dcc4-7db0-4702-b609-cb8458881c6b",
                    "563e0889-271f-4427-b47b-abb1502d810a",
                    "1a2d24dd-f762-472c-86d9-a6f3b402e1a1"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 6,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 40000
                },
                {
                  "uuid": "528d70f0-7438-4bb5-b4fb-8e7136ffb4b6",
                  "title": "state OngoingChallenge",
                  "fullFile": "/home/ibuntu/BlockchainDev/Alyra/MyTests/PROJET_FINAL/backend/test/Challenge NEW.test.js",
                  "file": "/test/Challenge NEW.test.js",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"state OngoingChallenge\"",
                      "fullTitle": "tests Challenge contract State functions availability state OngoingChallenge \"before each\" hook in \"state OngoingChallenge\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "({challenge, signers, bid, token} = await loadFixture(OngoingChallengeFixture));",
                      "err": {},
                      "uuid": "0e8299e0-e0da-4d38-9694-e0d126128dd9",
                      "parentUUID": "528d70f0-7438-4bb5-b4fb-8e7136ffb4b6",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should not allow joinChallenge() in OngoingChallenge state",
                      "fullTitle": "tests Challenge contract State functions availability state OngoingChallenge should not allow joinChallenge() in OngoingChallenge state",
                      "timedOut": false,
                      "duration": 4,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const { v: v1, r: r1, s: s1, deadline: deadline1 } = await GetRSVsig(signers[0], token, bid, challenge);\nawait expect(\n    challenge.joinChallenge(deadline1, v1, r1, s1, [])\n).to.be.revertedWith(\"Not allowed in this state\");",
                      "err": {},
                      "uuid": "25673166-38c8-449b-ac37-3a319a8ac8ff",
                      "parentUUID": "528d70f0-7438-4bb5-b4fb-8e7136ffb4b6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow withdrawFromChallenge() in OngoingChallenge state",
                      "fullTitle": "tests Challenge contract State functions availability state OngoingChallenge should not allow withdrawFromChallenge() in OngoingChallenge state",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await expect(\n    challenge.withdrawFromChallenge()\n).to.be.revertedWith(\"Not allowed in this state\");",
                      "err": {},
                      "uuid": "7f7ce379-e109-438d-b8e5-b35ecd1ccc70",
                      "parentUUID": "528d70f0-7438-4bb5-b4fb-8e7136ffb4b6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow startChallenge() in OngoingChallenge state",
                      "fullTitle": "tests Challenge contract State functions availability state OngoingChallenge should not allow startChallenge() in OngoingChallenge state",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await expect(\n    challenge.startChallenge()\n).to.be.revertedWith(\"Not allowed in this state\");",
                      "err": {},
                      "uuid": "2fc3ac4e-c3be-47f7-a7d8-f8cdd7500064",
                      "parentUUID": "528d70f0-7438-4bb5-b4fb-8e7136ffb4b6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow voteForWinner() in OngoingChallenge state (if the challenge is not over)",
                      "fullTitle": "tests Challenge contract State functions availability state OngoingChallenge should not allow voteForWinner() in OngoingChallenge state (if the challenge is not over)",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await expect(\n    challenge.voteForWinner(signers[1].address)\n).to.be.revertedWith(\"You are not allowed to vote now\");",
                      "err": {},
                      "uuid": "a3d88517-35e6-438d-9109-a71e82a2ef93",
                      "parentUUID": "528d70f0-7438-4bb5-b4fb-8e7136ffb4b6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should allow voteForWinner() in OngoingChallenge state (if the challenge is over). state should become \"VotingForWinner\" after first player votes at the end of the challenge. ",
                      "fullTitle": "tests Challenge contract State functions availability state OngoingChallenge should allow voteForWinner() in OngoingChallenge state (if the challenge is over). state should become \"VotingForWinner\" after first player votes at the end of the challenge. ",
                      "timedOut": false,
                      "duration": 4,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "expect(await challenge.currentStatus()).to.equal(ChallengeStatus.OngoingChallenge);\n//wait for challenge to end\nawait time.increase(duration);\n\n//should be allowed\nawait expect(\n    challenge.voteForWinner(signers[1].address)\n).to.not.be.reverted;\n//State should have changed\nexpect(await challenge.currentStatus()).to.equal(ChallengeStatus.VotingForWinner);",
                      "err": {},
                      "uuid": "182516c7-21f8-4059-8e19-399f073e57da",
                      "parentUUID": "528d70f0-7438-4bb5-b4fb-8e7136ffb4b6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow endWinnerVote() in OngoingChallenge state",
                      "fullTitle": "tests Challenge contract State functions availability state OngoingChallenge should not allow endWinnerVote() in OngoingChallenge state",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await expect(\n    challenge.endWinnerVote()\n).to.be.revertedWith(\"Not allowed in this state\");",
                      "err": {},
                      "uuid": "2dad4ec3-558c-4c3f-a6a6-7e0124fb26c3",
                      "parentUUID": "528d70f0-7438-4bb5-b4fb-8e7136ffb4b6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow withdrawPrize() in OnGoingChallenge state",
                      "fullTitle": "tests Challenge contract State functions availability state OngoingChallenge should not allow withdrawPrize() in OnGoingChallenge state",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await expect(\n    challenge.withdrawPrize()\n).to.be.revertedWith(\"Not allowed in this state\");",
                      "err": {},
                      "uuid": "a5a5a900-2607-4c4d-81b0-8fcd30c31f6d",
                      "parentUUID": "528d70f0-7438-4bb5-b4fb-8e7136ffb4b6",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "25673166-38c8-449b-ac37-3a319a8ac8ff",
                    "7f7ce379-e109-438d-b8e5-b35ecd1ccc70",
                    "2fc3ac4e-c3be-47f7-a7d8-f8cdd7500064",
                    "a3d88517-35e6-438d-9109-a71e82a2ef93",
                    "182516c7-21f8-4059-8e19-399f073e57da",
                    "2dad4ec3-558c-4c3f-a6a6-7e0124fb26c3",
                    "a5a5a900-2607-4c4d-81b0-8fcd30c31f6d"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 14,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 40000
                },
                {
                  "uuid": "05f92a36-54ee-4b31-8de9-cf7667ceab9d",
                  "title": "state VotingForWinner",
                  "fullFile": "/home/ibuntu/BlockchainDev/Alyra/MyTests/PROJET_FINAL/backend/test/Challenge NEW.test.js",
                  "file": "/test/Challenge NEW.test.js",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"state VotingForWinner\"",
                      "fullTitle": "tests Challenge contract State functions availability state VotingForWinner \"before each\" hook in \"state VotingForWinner\"",
                      "timedOut": false,
                      "duration": 0,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "({challenge, signers, bid, token} = await loadFixture(VotingForWinnerFixture));",
                      "err": {},
                      "uuid": "3652808d-a9e8-488a-bbe1-763cc1eb8397",
                      "parentUUID": "05f92a36-54ee-4b31-8de9-cf7667ceab9d",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should not allow joinChallenge() in VotingForWinner state",
                      "fullTitle": "tests Challenge contract State functions availability state VotingForWinner should not allow joinChallenge() in VotingForWinner state",
                      "timedOut": false,
                      "duration": 4,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const { v: v1, r: r1, s: s1, deadline: deadline1 } = await GetRSVsig(signers[0], token, bid, challenge);\nawait expect(\n    challenge.joinChallenge(deadline1, v1, r1, s1, [])\n).to.be.revertedWith(\"Not allowed in this state\");",
                      "err": {},
                      "uuid": "40d4fe92-af10-4edb-8188-f1ba07473336",
                      "parentUUID": "05f92a36-54ee-4b31-8de9-cf7667ceab9d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow withdrawFromChallenge() in OngoingChallenge state",
                      "fullTitle": "tests Challenge contract State functions availability state VotingForWinner should not allow withdrawFromChallenge() in OngoingChallenge state",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await expect(\n    challenge.withdrawFromChallenge()\n).to.be.revertedWith(\"Not allowed in this state\");",
                      "err": {},
                      "uuid": "ac43cb49-631f-4617-9f69-3c487af5c213",
                      "parentUUID": "05f92a36-54ee-4b31-8de9-cf7667ceab9d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow startChallenge() in VotingForWinner state",
                      "fullTitle": "tests Challenge contract State functions availability state VotingForWinner should not allow startChallenge() in VotingForWinner state",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await expect(\n    challenge.startChallenge()\n).to.be.revertedWith(\"Not allowed in this state\");",
                      "err": {},
                      "uuid": "dc5b1442-114b-4f75-b96d-61fb2b1ba376",
                      "parentUUID": "05f92a36-54ee-4b31-8de9-cf7667ceab9d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow withdrawPrize() in VotingForWinner state",
                      "fullTitle": "tests Challenge contract State functions availability state VotingForWinner should not allow withdrawPrize() in VotingForWinner state",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await expect(\n    challenge.withdrawPrize()\n).to.be.revertedWith(\"Not allowed in this state\");",
                      "err": {},
                      "uuid": "9df8bd31-a575-4a1b-a960-e4d93dc9cd06",
                      "parentUUID": "05f92a36-54ee-4b31-8de9-cf7667ceab9d",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "40d4fe92-af10-4edb-8188-f1ba07473336",
                    "ac43cb49-631f-4617-9f69-3c487af5c213",
                    "dc5b1442-114b-4f75-b96d-61fb2b1ba376",
                    "9df8bd31-a575-4a1b-a960-e4d93dc9cd06"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 7,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 40000
                },
                {
                  "uuid": "d930838f-cf2e-4548-a7c3-2cc80cd125d9",
                  "title": "state ChallengeWon",
                  "fullFile": "/home/ibuntu/BlockchainDev/Alyra/MyTests/PROJET_FINAL/backend/test/Challenge NEW.test.js",
                  "file": "/test/Challenge NEW.test.js",
                  "beforeHooks": [
                    {
                      "title": "\"before each\" hook in \"state ChallengeWon\"",
                      "fullTitle": "tests Challenge contract State functions availability state ChallengeWon \"before each\" hook in \"state ChallengeWon\"",
                      "timedOut": false,
                      "duration": 2,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "({challenge, signers, bid, token} = await loadFixture(EndingVoteFixture));\nawait challenge.endWinnerVote();",
                      "err": {},
                      "uuid": "349f92bc-4b15-4078-87d5-525e0dd26c56",
                      "parentUUID": "d930838f-cf2e-4548-a7c3-2cc80cd125d9",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should not allow joinChallenge() in ChallengeWon state",
                      "fullTitle": "tests Challenge contract State functions availability state ChallengeWon should not allow joinChallenge() in ChallengeWon state",
                      "timedOut": false,
                      "duration": 6,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const { v: v1, r: r1, s: s1, deadline: deadline1 } = await GetRSVsig(signers[0], token, bid, challenge);\nawait expect(\n    challenge.joinChallenge(deadline1, v1, r1, s1, [])\n).to.be.revertedWith(\"Not allowed in this state\");",
                      "err": {},
                      "uuid": "233b2fd4-7ba7-468a-8ac4-14c5d22346a4",
                      "parentUUID": "d930838f-cf2e-4548-a7c3-2cc80cd125d9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow withdrawFromChallenge() in OngoingChallenge state",
                      "fullTitle": "tests Challenge contract State functions availability state ChallengeWon should not allow withdrawFromChallenge() in OngoingChallenge state",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await expect(\n    challenge.withdrawFromChallenge()\n).to.be.revertedWith(\"Not allowed in this state\");",
                      "err": {},
                      "uuid": "53b753a2-9e96-429a-8ee6-4034e054dccf",
                      "parentUUID": "d930838f-cf2e-4548-a7c3-2cc80cd125d9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow startChallenge() in ChallengeWon state",
                      "fullTitle": "tests Challenge contract State functions availability state ChallengeWon should not allow startChallenge() in ChallengeWon state",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await expect(\n    challenge.startChallenge()\n).to.be.revertedWith(\"Not allowed in this state\");",
                      "err": {},
                      "uuid": "9d6661bc-68c6-4efa-9794-303101e87a68",
                      "parentUUID": "d930838f-cf2e-4548-a7c3-2cc80cd125d9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow voteForWinner() in ChallengeWon state",
                      "fullTitle": "tests Challenge contract State functions availability state ChallengeWon should not allow voteForWinner() in ChallengeWon state",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await expect(\n    challenge.voteForWinner(signers[1].address)\n).to.be.revertedWith(\"Not allowed in this state\");",
                      "err": {},
                      "uuid": "87b52a3a-9d1c-4f7a-bb90-eb8d0963602d",
                      "parentUUID": "d930838f-cf2e-4548-a7c3-2cc80cd125d9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should not allow endWinnerVote() in ChallengeWon state",
                      "fullTitle": "tests Challenge contract State functions availability state ChallengeWon should not allow endWinnerVote() in ChallengeWon state",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "await expect(\n    challenge.endWinnerVote()\n).to.be.revertedWith(\"Not allowed in this state\");",
                      "err": {},
                      "uuid": "0ff21b09-4bda-4966-bb48-951edd7e9ebf",
                      "parentUUID": "d930838f-cf2e-4548-a7c3-2cc80cd125d9",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "233b2fd4-7ba7-468a-8ac4-14c5d22346a4",
                    "53b753a2-9e96-429a-8ee6-4034e054dccf",
                    "9d6661bc-68c6-4efa-9794-303101e87a68",
                    "87b52a3a-9d1c-4f7a-bb90-eb8d0963602d",
                    "0ff21b09-4bda-4966-bb48-951edd7e9ebf"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 13,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 40000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 40000
            },
            {
              "uuid": "17d3052b-9619-41a2-a46d-f5bacd07aa4f",
              "title": "Events",
              "fullFile": "/home/ibuntu/BlockchainDev/Alyra/MyTests/PROJET_FINAL/backend/test/Challenge NEW.test.js",
              "file": "/test/Challenge NEW.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should emit an event when a Player Joined",
                  "fullTitle": "tests Challenge contract Events should emit an event when a Player Joined",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const {challenge, signers, bid, token} = await loadFixture(deployedChallengeFixtureBase)\nconst { v: v1, r: r1, s: s1, deadline: deadline1 } = await GetRSVsig(signers[0], token, bid, challenge);\nawait expect(challenge.joinChallenge(deadline1, v1, r1, s1, []))\n    .to.emit(challenge, \"PlayerJoined\")\n    .withArgs(signers[0].address);",
                  "err": {},
                  "uuid": "4b9c22a6-683a-44ac-b891-64442b29b594",
                  "parentUUID": "17d3052b-9619-41a2-a46d-f5bacd07aa4f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit an event when a Player Withdraws from challenge",
                  "fullTitle": "tests Challenge contract Events should emit an event when a Player Withdraws from challenge",
                  "timedOut": false,
                  "duration": 17,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const {challenge, signers, bid, token} = await loadFixture(deployedChallengeFixtureBase)\nconst { v: v1, r: r1, s: s1, deadline: deadline1 } = await GetRSVsig(signers[0], token, bid, challenge);\nawait challenge.joinChallenge(deadline1, v1, r1, s1, []);\nawait expect(challenge.withdrawFromChallenge())\n    .to.emit(challenge, \"PlayerWithdrawn\")\n    .withArgs(signers[0].address);",
                  "err": {},
                  "uuid": "d100b860-3341-4cb3-86f9-61dc17838217",
                  "parentUUID": "17d3052b-9619-41a2-a46d-f5bacd07aa4f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit an event when ChallengeStarted",
                  "fullTitle": "tests Challenge contract Events should emit an event when ChallengeStarted",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const {challenge, signers, bid, token} = await loadFixture(deployedChallengeFixtureBase)\nconst { v: v1, r: r1, s: s1, deadline: deadline1 } = await GetRSVsig(signers[0], token, bid, challenge);\nconst { v: v2, r: r2, s: s2, deadline: deadline2 } = await GetRSVsig(signers[1], token, bid, challenge);\nawait challenge.joinChallenge(deadline1, v1, r1, s1, []);\nawait challenge.connect(signers[1]).joinChallenge(deadline2, v2, r2, s2, []);\nawait expect(challenge.startChallenge())\n    .to.emit(challenge, \"ChallengeStarted\")",
                  "err": {},
                  "uuid": "eb2bb18d-4545-4b6a-afe3-96750a84fa74",
                  "parentUUID": "17d3052b-9619-41a2-a46d-f5bacd07aa4f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit an event when ChallengeEnded ",
                  "fullTitle": "tests Challenge contract Events should emit an event when ChallengeEnded ",
                  "timedOut": false,
                  "duration": 47,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const {challenge, signers} = await loadFixture(OngoingChallengeFixture)\n//Pass enough time\nawait time.increase(duration)\nawait expect(challenge.voteForWinner(signers[1].address))\n    .to.emit(challenge, \"ChallengeEnded\")",
                  "err": {},
                  "uuid": "5385f5f4-b28d-474e-a45a-0d05a1aef43c",
                  "parentUUID": "17d3052b-9619-41a2-a46d-f5bacd07aa4f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit an event when PlayerVoted",
                  "fullTitle": "tests Challenge contract Events should emit an event when PlayerVoted",
                  "timedOut": false,
                  "duration": 50,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const {challenge, signers} = await loadFixture(VotingForWinnerFixture)\nawait expect(challenge.voteForWinner(signers[1].address))\n    .to.emit(challenge, \"PlayerVoted\")\n    .withArgs(signers[0].address, signers[1].address)",
                  "err": {},
                  "uuid": "6552d5fc-a82b-49e1-9b35-660b108168de",
                  "parentUUID": "17d3052b-9619-41a2-a46d-f5bacd07aa4f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should emit an event when a prize is sent",
                  "fullTitle": "tests Challenge contract Events should emit an event when a prize is sent",
                  "timedOut": false,
                  "duration": 67,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const {challenge, signers, bid} = await loadFixture(EndingVoteFixture)\nawait challenge.endWinnerVote()\nconst expectedPrize = bid*5n - 5n*bid*BigInt(gold)/100n;\nawait expect(\n    await challenge.connect(signers[1]).withdrawPrize()\n).to.emit(challenge, \"PrizeWithdrawn\")\n    .withArgs(signers[1].address, expectedPrize)",
                  "err": {},
                  "uuid": "050131f3-5177-4a86-83c5-ddedb03b3202",
                  "parentUUID": "17d3052b-9619-41a2-a46d-f5bacd07aa4f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4b9c22a6-683a-44ac-b891-64442b29b594",
                "d100b860-3341-4cb3-86f9-61dc17838217",
                "eb2bb18d-4545-4b6a-afe3-96750a84fa74",
                "5385f5f4-b28d-474e-a45a-0d05a1aef43c",
                "6552d5fc-a82b-49e1-9b35-660b108168de",
                "050131f3-5177-4a86-83c5-ddedb03b3202"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 199,
              "root": false,
              "rootEmpty": false,
              "_timeout": 40000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 40000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 40000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": true,
        "reportFilename": "report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "test-report",
        "reportFilename": "report",
        "quiet": true
      },
      "version": "6.2.0"
    }
  }
}